// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using CsvParser.Data.Models;
using CSVParser.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace CSVParser.Data;

public partial class TMRRadzenContext : DbContext
{
    public TMRRadzenContext(DbContextOptions<TMRRadzenContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AICSVDocuments> AICSVDocuments { get; set; }
    public virtual DbSet<AIReportIndexes> AIReportIndexes { get; set; }
    public virtual DbSet<AIReportTenantIndexes> AIReportTenantIndexes { get; set; }

    public virtual DbSet<AIReportRequest> AIReportRequests { get; set; }

    public virtual DbSet<AIReportRequest1> AIReportRequests1 { get; set; }

    public virtual DbSet<AIReportResult> AIReportResults { get; set; }

    public virtual DbSet<APISECollection> APISECollections { get; set; }

    public virtual DbSet<APISECollectionSWAGGERSKeyValue> APISECollectionSWAGGERSKeyValues { get; set; }

    public virtual DbSet<APISECollectionTestConfig> APISECollectionTestConfigs { get; set; }

    public virtual DbSet<APISESWAGGER> APISESWAGGERs { get; set; }

    public virtual DbSet<APISESWAGGERManipulation> APISESWAGGERManipulations { get; set; }

    public virtual DbSet<APISESubmission> APISESubmissions { get; set; }

    public virtual DbSet<APISESubmissionKeyValuePair> APISESubmissionKeyValuePairs { get; set; }

    public virtual DbSet<ApplicationEventLog> ApplicationEventLogs { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<AssetPurchaseOrder> AssetPurchaseOrders { get; set; }

    public virtual DbSet<AssetPurchaseOrderItem> AssetPurchaseOrderItems { get; set; }

    public virtual DbSet<AssetPurchaseOrderTransaction> AssetPurchaseOrderTransactions { get; set; }

    public virtual DbSet<AssetRegister> AssetRegisters { get; set; }

    public virtual DbSet<AssetRegisterCategory> AssetRegisterCategories { get; set; }

    public virtual DbSet<AssetRegisterComment> AssetRegisterComments { get; set; }

    public virtual DbSet<AssetRegisterDepreciationSceduleItem> AssetRegisterDepreciationSceduleItems { get; set; }

    public virtual DbSet<AssetRegisterDepreciationSchedule> AssetRegisterDepreciationSchedules { get; set; }

    public virtual DbSet<AssetRegisterDepreciationScheduleDisposalCode> AssetRegisterDepreciationScheduleDisposalCodes { get; set; }

    public virtual DbSet<AssetRegisterInspectionSchedule> AssetRegisterInspectionSchedules { get; set; }

    public virtual DbSet<AssetRegisterInspectionScheduleComment> AssetRegisterInspectionScheduleComments { get; set; }

    public virtual DbSet<AssetRegisterIssuesLog> AssetRegisterIssuesLogs { get; set; }

    public virtual DbSet<AssetRegisterMaintenanceLog> AssetRegisterMaintenanceLogs { get; set; }

    public virtual DbSet<AssetRegisterMaintenanceLogComment> AssetRegisterMaintenanceLogComments { get; set; }

    public virtual DbSet<AssetRegisterMaintenanceLogType> AssetRegisterMaintenanceLogTypes { get; set; }

    public virtual DbSet<AssetRegisterReservation> AssetRegisterReservations { get; set; }

    public virtual DbSet<AssetRegisterReservationComment> AssetRegisterReservationComments { get; set; }

    public virtual DbSet<AssetRegisterReservationReport> AssetRegisterReservationReports { get; set; }

    public virtual DbSet<AssetRegisterReservationTermsAndCondition> AssetRegisterReservationTermsAndConditions { get; set; }

    public virtual DbSet<AssetRegisterWarranty> AssetRegisterWarranties { get; set; }

    public virtual DbSet<AssetSupplier> AssetSuppliers { get; set; }

    public virtual DbSet<AssetSupplierComment> AssetSupplierComments { get; set; }

    public virtual DbSet<AssetSupplierContact> AssetSupplierContacts { get; set; }

    public virtual DbSet<AssetSupplierType> AssetSupplierTypes { get; set; }

    public virtual DbSet<AssuranceAutomatedControlTestBatchRun> AssuranceAutomatedControlTestBatchRuns { get; set; }

    public virtual DbSet<AssuranceAutomatedControlTestDefinition> AssuranceAutomatedControlTestDefinitions { get; set; }

    public virtual DbSet<AssuranceAutomatedControlTestExecutedOutcome> AssuranceAutomatedControlTestExecutedOutcomes { get; set; }
    public virtual DbSet<AssuranceSubmissionLog> AssuranceSubmissionLogs { get; set; }
    public virtual DbSet<AssuranceSubmissionProcessed> AssuranceSubmissionProcesseds { get; set; }
    public virtual DbSet<AssuranceSubmissionProcessedResponsesStructured> AssuranceSubmissionProcessedResponsesStructureds { get; set; }

    public virtual DbSet<AssuranceProgram> AssurancePrograms { get; set; }

    public virtual DbSet<AssuranceSchedule> AssuranceSchedules { get; set; }

    public virtual DbSet<AssuranceScheduleUser> AssuranceScheduleUsers { get; set; }

    //public virtual DbSet<AssuranceSubmissionLog> AssuranceSubmissionLogs { get; set; }

    //public virtual DbSet<AssuranceSubmissionProcessed> AssuranceSubmissionProcesseds { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedComment> AssuranceSubmissionProcessedComments { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedGrouping> AssuranceSubmissionProcessedGroupings { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedResponsesDocsWeighting> AssuranceSubmissionProcessedResponsesDocsWeightings { get; set; }

    //public virtual DbSet<AssuranceSubmissionProcessedResponsesStructured> AssuranceSubmissionProcessedResponsesStructureds { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedResponsesUnStructured> AssuranceSubmissionProcessedResponsesUnStructureds { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedResponsesUnStructuredAnswer> AssuranceSubmissionProcessedResponsesUnStructuredAnswers { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedRisksStandardsActsWeighting> AssuranceSubmissionProcessedRisksStandardsActsWeightings { get; set; }

    public virtual DbSet<AssuranceSubmissionProcessedVoiceTranscriptionAndSentiment> AssuranceSubmissionProcessedVoiceTranscriptionAndSentiments { get; set; }

    public virtual DbSet<AssuranceSubmissionprocessedResponsesStructuredAnswer> AssuranceSubmissionprocessedResponsesStructuredAnswers { get; set; }

    public virtual DbSet<AssuranceTemplate> AssuranceTemplates { get; set; }

    public virtual DbSet<AssuranceTemplatesScoringBand> AssuranceTemplatesScoringBands { get; set; }

    public virtual DbSet<AssuranceVoiceStaging> AssuranceVoiceStagings { get; set; }

    public virtual DbSet<AssuranceVoiceTestTemplate> AssuranceVoiceTestTemplates { get; set; }

    public virtual DbSet<Attachment> Attachments { get; set; }

    public virtual DbSet<BCPLibrary> BCPLibraries { get; set; }

    public virtual DbSet<BusinessContinuityPlan> BusinessContinuityPlans { get; set; }

    public virtual DbSet<BusinessContinuityPlansComment> BusinessContinuityPlansComments { get; set; }

    public virtual DbSet<BusinessContinuityPlansLinkActionTask> BusinessContinuityPlansLinkActionTasks { get; set; }

    public virtual DbSet<ComplaintsOrCompliment> ComplaintsOrCompliments { get; set; }

    public virtual DbSet<ComplaintsOrComplimentsComment> ComplaintsOrComplimentsComments { get; set; }

    public virtual DbSet<CredScraperFile> CredScraperFiles { get; set; }

    public virtual DbSet<CredScraperGoverningBody> CredScraperGoverningBodies { get; set; }

    public virtual DbSet<CredScraperUserRecord> CredScraperUserRecords { get; set; }

    public virtual DbSet<Credential> Credentials { get; set; }

    public virtual DbSet<CredentialsCondition> CredentialsConditions { get; set; }

    public virtual DbSet<CredentialsConditionsPeriodicAcknowledgement> CredentialsConditionsPeriodicAcknowledgements { get; set; }

    public virtual DbSet<CredentialsNotation> CredentialsNotations { get; set; }

    public virtual DbSet<CredentialsRegulatoryBody> CredentialsRegulatoryBodies { get; set; }

    public virtual DbSet<CredentialsReprimand> CredentialsReprimands { get; set; }

    public virtual DbSet<CredentialsUndertaking> CredentialsUndertakings { get; set; }

    public virtual DbSet<CredentialsUserRegistration> CredentialsUserRegistrations { get; set; }

    public virtual DbSet<DeviceCode> DeviceCodes { get; set; }

    public virtual DbSet<Division> Divisions { get; set; }

    public virtual DbSet<Doc> Docs { get; set; }

    public virtual DbSet<DocsAccessLog> DocsAccessLogs { get; set; }

    public virtual DbSet<DocsDelegatedAuthority> DocsDelegatedAuthorities { get; set; }

    public virtual DbSet<DocsItem> DocsItems { get; set; }

    public virtual DbSet<DocsItemComment> DocsItemComments { get; set; }

    public virtual DbSet<DocsItemsExemption> DocsItemsExemptions { get; set; }

    public virtual DbSet<DocsKnowledgeTransfer> DocsKnowledgeTransfers { get; set; }

    public virtual DbSet<DocsKnowledgeTransferUser> DocsKnowledgeTransferUsers { get; set; }

    public virtual DbSet<DocsLibraryItemsExemptionsCondition> DocsLibraryItemsExemptionsConditions { get; set; }

    public virtual DbSet<DocsRelatedChildArtifact> DocsRelatedChildArtifacts { get; set; }

    public virtual DbSet<DocsReview> DocsReviews { get; set; }

    public virtual DbSet<DocsSubscriptionUser> DocsSubscriptionUsers { get; set; }

    public virtual DbSet<DocstensExemptionsComment> DocstensExemptionsComments { get; set; }

    public virtual DbSet<ENUMReference> ENUMReferences { get; set; }

    public virtual DbSet<Improvement> Improvements { get; set; }

    public virtual DbSet<ImprovementTeamMember> ImprovementTeamMembers { get; set; }

    public virtual DbSet<ImprovementTool> ImprovementTools { get; set; }

    public virtual DbSet<ImprovementType> ImprovementTypes { get; set; }

    public virtual DbSet<ImprovementsDelivered> ImprovementsDelivereds { get; set; }

    public virtual DbSet<ImprovementsObjective> ImprovementsObjectives { get; set; }

    public virtual DbSet<Incident> Incidents { get; set; }

    public virtual DbSet<IncidentsCannedBCP> IncidentsCannedBCPs { get; set; }

    public virtual DbSet<IncidentsCannedReport> IncidentsCannedReports { get; set; }

    public virtual DbSet<IncidentsCategory> IncidentsCategories { get; set; }

    public virtual DbSet<IncidentsDivisionOwner> IncidentsDivisionOwners { get; set; }

    public virtual DbSet<IncidentsEmergencyResponse> IncidentsEmergencyResponses { get; set; }

    public virtual DbSet<IncidentsEmergencyResponseType> IncidentsEmergencyResponseTypes { get; set; }

    public virtual DbSet<IncidentsExternalTeamMember> IncidentsExternalTeamMembers { get; set; }

    public virtual DbSet<IncidentsFieldInvestigation> IncidentsFieldInvestigations { get; set; }

    public virtual DbSet<IncidentsFieldInvestigationCategoriesAndForm> IncidentsFieldInvestigationCategoriesAndForms { get; set; }

    public virtual DbSet<IncidentsFieldInvestigationExternalPartiesLinkIncident> IncidentsFieldInvestigationExternalPartiesLinkIncidents { get; set; }

    public virtual DbSet<IncidentsFieldInvestigationSubmissionLog> IncidentsFieldInvestigationSubmissionLogs { get; set; }

    public virtual DbSet<IncidentsFieldInvestigationsFormResult> IncidentsFieldInvestigationsFormResults { get; set; }

    public virtual DbSet<IncidentsInternalTeamMember> IncidentsInternalTeamMembers { get; set; }

    public virtual DbSet<IncidentsLessonsLearnt> IncidentsLessonsLearnts { get; set; }

    public virtual DbSet<IncidentsLessonsLearntKeyword> IncidentsLessonsLearntKeywords { get; set; }

    public virtual DbSet<IncidentsRPOLibrary> IncidentsRPOLibraries { get; set; }

    public virtual DbSet<IncidentsRPOLibraryLinkIncident> IncidentsRPOLibraryLinkIncidents { get; set; }

    public virtual DbSet<IncidentsRTOLibrary> IncidentsRTOLibraries { get; set; }

    public virtual DbSet<IncidentsRTOLibraryLinkIncident> IncidentsRTOLibraryLinkIncidents { get; set; }

    public virtual DbSet<IncidentsReport> IncidentsReports { get; set; }

    public virtual DbSet<IncidentsReportsComment> IncidentsReportsComments { get; set; }

    public virtual DbSet<IncidentsSeverity> IncidentsSeverities { get; set; }

    public virtual DbSet<IncidentsSnapChartCausalFactor> IncidentsSnapChartCausalFactors { get; set; }

    public virtual DbSet<IncidentsSnapChartLog> IncidentsSnapChartLogs { get; set; }

    public virtual DbSet<IncidentsStatementsOfNeed> IncidentsStatementsOfNeeds { get; set; }

    public virtual DbSet<InternalAudit> InternalAudits { get; set; }

    public virtual DbSet<InternalAuditPlan> InternalAuditPlans { get; set; }

    public virtual DbSet<InternalAuditPlanResource> InternalAuditPlanResources { get; set; }

    public virtual DbSet<InternalAuditResource> InternalAuditResources { get; set; }

    public virtual DbSet<IssuesActionTaskType> IssuesActionTaskTypes { get; set; }

    public virtual DbSet<IssuesActionsTask> IssuesActionsTasks { get; set; }

    public virtual DbSet<IssuesActionsTasksComment> IssuesActionsTasksComments { get; set; }

    public virtual DbSet<IssuesActionsTasksDivisionOwnerOverride> IssuesActionsTasksDivisionOwnerOverrides { get; set; }

    public virtual DbSet<IssuesActionsTasksLinkToSelf> IssuesActionsTasksLinkToSelves { get; set; }

    public virtual DbSet<IssuesActionsTasksUrgencyAndOffset> IssuesActionsTasksUrgencyAndOffsets { get; set; }

    public virtual DbSet<Key> Keys { get; set; }

    public virtual DbSet<PersistedGrant> PersistedGrants { get; set; }

    public virtual DbSet<RegulatoryEngagement> RegulatoryEngagements { get; set; }

    public virtual DbSet<RegulatoryEngagementBody> RegulatoryEngagementBodies { get; set; }

    public virtual DbSet<RegulatoryEngagementBodyContact> RegulatoryEngagementBodyContacts { get; set; }

    public virtual DbSet<RegulatoryEngagementEventLog> RegulatoryEngagementEventLogs { get; set; }

    public virtual DbSet<RegulatoryEngagementResource> RegulatoryEngagementResources { get; set; }

    public virtual DbSet<RegulatoryEngagementsOutcome> RegulatoryEngagementsOutcomes { get; set; }

    public virtual DbSet<Risk> Risks { get; set; }

    public virtual DbSet<RiskDiscovery> RiskDiscoveries { get; set; }

    public virtual DbSet<RiskDiscoveryControlScope> RiskDiscoveryControlScopes { get; set; }

    public virtual DbSet<RiskDiscoveryControlScopeDesignEffectiveness> RiskDiscoveryControlScopeDesignEffectivenesses { get; set; }

    public virtual DbSet<RiskDiscoveryControlScopeOperatingEffectiveness> RiskDiscoveryControlScopeOperatingEffectivenesses { get; set; }

    public virtual DbSet<RiskDiscoveryResource> RiskDiscoveryResources { get; set; }

    public virtual DbSet<RiskDiscoveryScope> RiskDiscoveryScopes { get; set; }

    public virtual DbSet<RiskDiscoveryScopeInherentAndResidualAssessment> RiskDiscoveryScopeInherentAndResidualAssessments { get; set; }

    public virtual DbSet<RisksControl> RisksControls { get; set; }

    public virtual DbSet<RisksControlSuggestion> RisksControlSuggestions { get; set; }

    public virtual DbSet<RisksControlSuggestionComment> RisksControlSuggestionComments { get; set; }

    public virtual DbSet<RisksMatirxsConcequenceLabel> RisksMatirxsConcequenceLabels { get; set; }

    public virtual DbSet<RisksMatirxsLikelihoodLabel> RisksMatirxsLikelihoodLabels { get; set; }

    public virtual DbSet<RisksMatrix> RisksMatrixs { get; set; }

    public virtual DbSet<RisksMatrixLikelihoodConsequenceField> RisksMatrixLikelihoodConsequenceFields { get; set; }

    public virtual DbSet<RisksOwnedRisk> RisksOwnedRisks { get; set; }

    public virtual DbSet<RisksOwnedRiskAutomatedControlTestBatch> RisksOwnedRiskAutomatedControlTestBatches { get; set; }

    public virtual DbSet<RisksOwnedRiskAutomatedControlTestBatchExecutedOutcome> RisksOwnedRiskAutomatedControlTestBatchExecutedOutcomes { get; set; }

    public virtual DbSet<RisksOwnedRiskAutomatedControlTestDefinition> RisksOwnedRiskAutomatedControlTestDefinitions { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentAndRedisualAssessment> RisksOwnedRiskInherentAndRedisualAssessments { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentAndResidualAssessmentControlEffectiveness> RisksOwnedRiskInherentAndResidualAssessmentControlEffectivenesses { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentAndResidualAssessmentSignOff> RisksOwnedRiskInherentAndResidualAssessmentSignOffs { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentAndResidualAssessmentUser> RisksOwnedRiskInherentAndResidualAssessmentUsers { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentResidualRiskAnalysis> RisksOwnedRiskInherentResidualRiskAnalyses { get; set; }

    public virtual DbSet<RisksOwnedRiskInherentRiskAnalysis> RisksOwnedRiskInherentRiskAnalyses { get; set; }

    public virtual DbSet<RisksOwnedRiskResidualRiskAnalysis> RisksOwnedRiskResidualRiskAnalyses { get; set; }

    public virtual DbSet<RisksStandardsAct> RisksStandardsActs { get; set; }

    public virtual DbSet<RisksSuggestion> RisksSuggestions { get; set; }

    public virtual DbSet<RisksSuggestionComment> RisksSuggestionComments { get; set; }

    public virtual DbSet<SSRSReportGroup> SSRSReportGroups { get; set; }

    public virtual DbSet<SSRSReportList> SSRSReportLists { get; set; }

    public virtual DbSet<TenantKey> TenantKeys { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AICSVDocuments>(entity =>
        {
            entity.ToTable("AICSVDocument");

            entity.HasKey(e => e.Id);

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TenantId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.LastUpdatedTimestamp)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .IsRequired();

        });

        modelBuilder.Entity<AIReportIndexes>(entity =>
        {
            entity.ToTable("AIReportIndexes");
            entity.HasKey(e => e.Id);

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.IndexName)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.IndexDescription)
                .IsRequired()
                .HasMaxLength(300);
        });

        modelBuilder.Entity<AIReportTenantIndexes>(entity =>
        {
            entity.ToTable("AIReportTenantIndexes");
            entity.HasKey(e => new { e.AIDocumentId, e.AIReportIndexId });

            entity.HasOne(e => e.Document)
                .WithMany(d => d.ReportTenantIndexes)
                .HasForeignKey(e => e.AIDocumentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AICSVDocument");

            entity.HasOne(e => e.Index)
                .WithMany(d => d.ReportTenantIndexes)
                .HasForeignKey(p => p.AIReportIndexId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AIReportIndexes");
        });

        modelBuilder.Entity<AIReportRequest1>(entity =>
        {
            entity.HasKey(e => e.AIRequestId).HasName("PK__AIReport__88B14AE7AFB856F1");

            entity.ToTable("AIReportRequests1");

            entity.Property(e => e.AIRequestId).ValueGeneratedNever();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ParametersJson).IsRequired();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AIReportResult>(entity =>
        {
            entity.HasKey(e => e.ResultId).HasName("PK__AIReport__976902087587DA81");

            entity.Property(e => e.ResultId).ValueGeneratedNever();
            entity.Property(e => e.CompletedAt).HasDefaultValueSql("(getutcdate())");
            entity.Property(e => e.ReportName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<APISECollection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_APISCollection");

            entity.ToTable("APISECollection");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Title).IsRequired();
        });

        modelBuilder.Entity<APISECollectionSWAGGERSKeyValue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_APISCollectionSWAGGERSKeyValue_1");

            entity.ToTable("APISECollectionSWAGGERSKeyValue");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.KeyPair).IsRequired();
            entity.Property(e => e.KeyType).IsRequired();

            entity.HasOne(d => d.APISECollection).WithMany(p => p.APISECollectionSWAGGERSKeyValues)
                .HasForeignKey(d => d.APISECollectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISCollectionSWAGGERSKeyValue_APISECollection");

            entity.HasOne(d => d.APISESwagger).WithMany(p => p.APISECollectionSWAGGERSKeyValues)
                .HasForeignKey(d => d.APISESwaggerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISCollectionSWAGGERSKeyValue_APISESWAGGERS");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.APISECollectionSWAGGERSKeyValues)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISCollectionSWAGGERSKeyValue_AspNetUsers");
        });

        modelBuilder.Entity<APISECollectionTestConfig>(entity =>
        {
            entity.ToTable("APISECollectionTestConfig");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TestConfigJSON).IsRequired();
            entity.Property(e => e.Title).IsRequired();
            entity.Property(e => e.USERID)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.APISECollection).WithMany(p => p.APISECollectionTestConfigs)
                .HasForeignKey(d => d.APISECollectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_APISECollection");

            entity.HasOne(d => d.AssuranceSchedule).WithMany(p => p.APISECollectionTestConfigs)
                .HasForeignKey(d => d.AssuranceScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_AssuranceSchedule");

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.APISECollectionTestConfigs)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.APISECollectionTestConfigCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.APISECollectionTestConfigs)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_Divisions");

            entity.HasOne(d => d.USER).WithMany(p => p.APISECollectionTestConfigUSERs)
                .HasForeignKey(d => d.USERID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISECollectionTestConfig_AspNetUsers1");
        });

        modelBuilder.Entity<APISESWAGGER>(entity =>
        {
            entity.ToTable("APISESWAGGERS");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SWAGGERJSON).IsRequired();
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.APISESWAGGERs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESWAGGERS_AspNetUsers");

            entity.HasMany(d => d.APISECollections).WithMany(p => p.APISESwaggers)
                .UsingEntity<Dictionary<string, object>>(
                    "APISECollectionSWAGGER",
                    r => r.HasOne<APISECollection>().WithMany()
                        .HasForeignKey("APISECollectionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_APISECollectionSWAGGERS_APISECollection"),
                    l => l.HasOne<APISESWAGGER>().WithMany()
                        .HasForeignKey("APISESwaggerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_APISECollectionSWAGGERS_APISESWAGGERS"),
                    j =>
                    {
                        j.HasKey("APISESwaggerId", "APISECollectionId");
                        j.ToTable("APISECollectionSWAGGERS");
                    });
        });

        modelBuilder.Entity<APISESWAGGERManipulation>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Manipulation).IsRequired();
            entity.Property(e => e.Objective).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Target).IsRequired();
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.APISESwagger).WithMany(p => p.APISESWAGGERManipulations)
                .HasForeignKey(d => d.APISESwaggerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESWAGGERManipulations_APISESWAGGERS");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.APISESWAGGERManipulations)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESWAGGERManipulations_AspNetUsers");
        });

        modelBuilder.Entity<APISESubmission>(entity =>
        {
            entity.ToTable("APISESubmission");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CollectionIds).IsRequired();
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Payload).IsRequired();
        });

        modelBuilder.Entity<APISESubmissionKeyValuePair>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.KeyPair).IsRequired();
            entity.Property(e => e.ValuePair).IsRequired();

            entity.HasOne(d => d.APISESubmission).WithMany(p => p.APISESubmissionKeyValuePairs)
                .HasForeignKey(d => d.APISESubmissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESubmissionKeyValuePairs_APISESubmission");

            entity.HasOne(d => d.Collection).WithMany(p => p.APISESubmissionKeyValuePairs)
                .HasForeignKey(d => d.CollectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESubmissionKeyValuePairs_APISECollection");

            entity.HasOne(d => d.Swagger).WithMany(p => p.APISESubmissionKeyValuePairs)
                .HasForeignKey(d => d.SwaggerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APISESubmissionKeyValuePairs_APISESWAGGERS");
        });

        modelBuilder.Entity<ApplicationEventLog>(entity =>
        {
            entity.ToTable("ApplicationEventLog");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.EventType).HasDefaultValue(1);
            entity.Property(e => e.JSONObject).IsRequired();
            entity.Property(e => e.JSONObjectType).IsRequired();
            entity.Property(e => e.TableName).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ApplicationEventLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ApplicationEventLog_AspNetUsers");
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex").IsUnique();

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex").IsUnique();

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.Name).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AssetPurchaseOrder>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.PurchaseOrderApprovalDt).HasColumnType("datetime");
            entity.Property(e => e.PurchaseOrderApprovedById).HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.SupplierOrderReference)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TaxCode)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssetSupplier).WithMany(p => p.AssetPurchaseOrders)
                .HasForeignKey(d => d.AssetSupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrders_AssetSupplier");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetPurchaseOrderCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrders_AspNetUsers1");

            entity.HasOne(d => d.PurchaseOrderApprovedBy).WithMany(p => p.AssetPurchaseOrderPurchaseOrderApprovedBies)
                .HasForeignKey(d => d.PurchaseOrderApprovedById)
                .HasConstraintName("FK_AssetPurchaseOrders_AspNetUsers");
        });

        modelBuilder.Entity<AssetPurchaseOrderItem>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();

            entity.HasOne(d => d.AssetPurchaseOrder).WithMany(p => p.AssetPurchaseOrderItems)
                .HasForeignKey(d => d.AssetPurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrderItems_AssetPurchaseOrders");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetPurchaseOrderItems)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrderItems_AspNetUsers");
        });

        modelBuilder.Entity<AssetPurchaseOrderTransaction>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DebitCredit)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TaxCode)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssetPurchaseOrder).WithMany(p => p.AssetPurchaseOrderTransactions)
                .HasForeignKey(d => d.AssetPurchaseOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrderTransactions_AssetPurchaseOrders");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetPurchaseOrderTransactions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPurchaseOrderTransactions_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegister>(entity =>
        {
            entity.ToTable("AssetRegister");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DepreciationDate).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LocationDetails).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetCategory).WithMany(p => p.AssetRegisters)
                .HasForeignKey(d => d.AssetCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegister_AssetRegisterCategories");

            entity.HasOne(d => d.AssetPurchaseOrder).WithMany(p => p.AssetRegisters)
                .HasForeignKey(d => d.AssetPurchaseOrderId)
                .HasConstraintName("FK_AssetRegister_AssetPurchaseOrders");

            entity.HasOne(d => d.AssetSupplier).WithMany(p => p.AssetRegisters)
                .HasForeignKey(d => d.AssetSupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegister_AssetSupplier");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegister_AspNetUsers1");

            entity.HasOne(d => d.OwnedBy).WithMany(p => p.AssetRegisterOwnedBies)
                .HasForeignKey(d => d.OwnedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegister_AspNetUsers");

            entity.HasOne(d => d.PrimaryLocation).WithMany(p => p.AssetRegisters)
                .HasForeignKey(d => d.PrimaryLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegister_Divisions");
        });

        modelBuilder.Entity<AssetRegisterCategory>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterCategories)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterCategories_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterComments)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterComments_AssetRegister");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterComments_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterDepreciationSceduleItem>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FinancialYear)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegisterDepreciationSchedule).WithMany(p => p.AssetRegisterDepreciationSceduleItems)
                .HasForeignKey(d => d.AssetRegisterDepreciationScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationSceduleItems_AssetRegisterDepreciationSchedule");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterDepreciationSceduleItems)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationSceduleItems_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterDepreciationSchedule>(entity =>
        {
            entity.ToTable("AssetRegisterDepreciationSchedule");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Country).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Currency)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EffectiveLife).IsRequired();
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetDepreciationScheduleDisposalCode).WithMany(p => p.AssetRegisterDepreciationSchedules)
                .HasForeignKey(d => d.AssetDepreciationScheduleDisposalCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationSchedule_AssetRegisterDepreciationScheduleDisposalCodes");

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterDepreciationSchedules)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationSchedule_AssetRegister");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterDepreciationSchedules)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationSchedule_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterDepreciationScheduleDisposalCode>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterDepreciationScheduleDisposalCodes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterDepreciationScheduleDisposalCodes_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterInspectionSchedule>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NextInspectionDt).HasColumnType("datetime");
            entity.Property(e => e.RequiredInspectionDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterInspectionSchedules)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterInspectionSchedules_AssetRegister");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterInspectionSchedules)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterInspectionSchedules_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterInspectionScheduleComment>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");

            entity.HasOne(d => d.AssetRegisterInspectionSchedule).WithMany(p => p.AssetRegisterInspectionScheduleComments)
                .HasForeignKey(d => d.AssetRegisterInspectionScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterInspectionScheduleComments_AssetRegisterInspectionSchedules");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterInspectionScheduleComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterInspectionScheduleComments_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterIssuesLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetRegisterIssuesLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterIssuesLogs)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterIssuesLog_AssetRegister");

            entity.HasOne(d => d.AssetRegisterReservation).WithMany(p => p.AssetRegisterIssuesLogs)
                .HasForeignKey(d => d.AssetRegisterReservationId)
                .HasConstraintName("FK_AssetRegisterIssuesLog_AssetRegisterReservation");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterIssuesLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterIssuesLog_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterMaintenanceLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetRegisterMaintenanceLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AllocatedToId).HasMaxLength(450);
            entity.Property(e => e.CompletedDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestedDt).HasColumnType("datetime");
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AllocatedTo).WithMany(p => p.AssetRegisterMaintenanceLogAllocatedTos)
                .HasForeignKey(d => d.AllocatedToId)
                .HasConstraintName("FK_AssetRegisterMaintenanceLog_AspNetUsers");

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterMaintenanceLogs)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLog_AssetRegister");

            entity.HasOne(d => d.AssetRegisterIssuesLog).WithMany(p => p.AssetRegisterMaintenanceLogs)
                .HasForeignKey(d => d.AssetRegisterIssuesLogId)
                .HasConstraintName("FK_AssetRegisterMaintenanceLog_AssetRegisterIssuesLog");

            entity.HasOne(d => d.AssetRegisterMaintenanceLogType).WithMany(p => p.AssetRegisterMaintenanceLogs)
                .HasForeignKey(d => d.AssetRegisterMaintenanceLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLog_AssetRegisterMaintenanceLogTypes");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterMaintenanceLogCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLog_AspNetUsers1");

            entity.HasMany(d => d.IssueActionTasks).WithMany(p => p.AssetRegisterMaintenanceLogs)
                .UsingEntity<Dictionary<string, object>>(
                    "AssetRegisterMaintenanceLogLinkIAT",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssueActionTaskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssetRegisterMaintenanceLogLinkIAT_IssuesActionsTasks"),
                    l => l.HasOne<AssetRegisterMaintenanceLog>().WithMany()
                        .HasForeignKey("AssetRegisterMaintenanceLogId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssetRegisterMaintenanceLogLinkIAT_AssetRegisterMaintenanceLogs"),
                    j =>
                    {
                        j.HasKey("AssetRegisterMaintenanceLogId", "IssueActionTaskId");
                        j.ToTable("AssetRegisterMaintenanceLogLinkIAT");
                    });
        });

        modelBuilder.Entity<AssetRegisterMaintenanceLogComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegisterMaintenanceLog).WithMany(p => p.AssetRegisterMaintenanceLogComments)
                .HasForeignKey(d => d.AssetRegisterMaintenanceLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLogComments_AssetRegisterMaintenanceLogs");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterMaintenanceLogComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLogComments_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterMaintenanceLogType>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterMaintenanceLogTypes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterMaintenanceLogTypes_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterReservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetRegisterReservation");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PlannedReturnDt).HasColumnType("datetime");
            entity.Property(e => e.RequestedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RequestedDt).HasColumnType("datetime");
            entity.Property(e => e.ReturnedDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterReservations)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservation_AssetRegister");

            entity.HasOne(d => d.AssetRegisterReservationTermsAndConditions).WithMany(p => p.AssetRegisterReservations)
                .HasForeignKey(d => d.AssetRegisterReservationTermsAndConditionsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservation_AssetRegisterReservationTermsAndConditions");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterReservationCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservation_AspNetUsers1");

            entity.HasOne(d => d.RequestedBy).WithMany(p => p.AssetRegisterReservationRequestedBies)
                .HasForeignKey(d => d.RequestedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservation_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterReservationComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetRegisterReservationComment");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegisterReservation).WithMany(p => p.AssetRegisterReservationComments)
                .HasForeignKey(d => d.AssetRegisterReservationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationComments_AssetRegisterReservations");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterReservationComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationComments_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterReservationReport>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegisterReservation).WithMany(p => p.AssetRegisterReservationReports)
                .HasForeignKey(d => d.AssetRegisterReservationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationReports_AssetRegisterReservations");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterReservationReports)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationReports_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterReservationTermsAndCondition>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterReservationTermsAndConditions)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationTermsAndConditions_AssetRegister");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterReservationTermsAndConditions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterReservationTermsAndConditions_AspNetUsers");
        });

        modelBuilder.Entity<AssetRegisterWarranty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetRegisterWarranty");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ExpiryDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetRegister).WithMany(p => p.AssetRegisterWarranties)
                .HasForeignKey(d => d.AssetRegisterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterWarranty_AssetRegister");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetRegisterWarranties)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetRegisterWarranty_AspNetUsers");
        });

        modelBuilder.Entity<AssetSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssetSupplier");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Phone).HasMaxLength(50);

            entity.HasOne(d => d.AssetSupplierType).WithMany(p => p.AssetSuppliers)
                .HasForeignKey(d => d.AssetSupplierTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplier_AssetSupplierTypes");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetSuppliers)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplier_AssetSupplier");
        });

        modelBuilder.Entity<AssetSupplierComment>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssetSupplier).WithMany(p => p.AssetSupplierComments)
                .HasForeignKey(d => d.AssetSupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplierComments_AssetSupplier");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetSupplierComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplierComments_AspNetUsers");
        });

        modelBuilder.Entity<AssetSupplierContact>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Role).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssetSupplier).WithMany(p => p.AssetSupplierContacts)
                .HasForeignKey(d => d.AssetSupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplierContacts_AssetSupplier");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssetSupplierContacts)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetSupplierContacts_AspNetUsers");
        });

        modelBuilder.Entity<AssetSupplierType>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BusinessTypeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Country).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
        });

        modelBuilder.Entity<AssuranceAutomatedControlTestBatchRun>(entity =>
        {
            entity.ToTable("AssuranceAutomatedControlTestBatchRun");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RunEndDT).HasColumnType("datetime");
            entity.Property(e => e.RunStartDT).HasColumnType("datetime");

            entity.HasOne(d => d.AssuranceAutomatedControlTestDefinition).WithMany(p => p.AssuranceAutomatedControlTestBatchRuns)
                .HasForeignKey(d => d.AssuranceAutomatedControlTestDefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceAutomatedControlTestBatchRun_AssuranceAutomatedControlTestDefinition");

            entity.HasMany(d => d.IssueActionTasks).WithMany(p => p.AssuranceAutomatedControlTestBatchRuns)
                .UsingEntity<Dictionary<string, object>>(
                    "AssuranceAutomatedControlTestBatchRunLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssueActionTaskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssuranceAutomatedControlTestBatchRunLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<AssuranceAutomatedControlTestBatchRun>().WithMany()
                        .HasForeignKey("AssuranceAutomatedControlTestBatchRunId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssuranceAutomatedControlTestBatchRunLinkIssuesActionsTasks_AssuranceAutomatedControlTestBatchRun"),
                    j =>
                    {
                        j.HasKey("AssuranceAutomatedControlTestBatchRunId", "IssueActionTaskId");
                        j.ToTable("AssuranceAutomatedControlTestBatchRunLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<AssuranceAutomatedControlTestDefinition>(entity =>
        {
            entity.ToTable("AssuranceAutomatedControlTestDefinition");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TextJSON).IsRequired();

            entity.HasOne(d => d.AssuranceSchedule).WithMany(p => p.AssuranceAutomatedControlTestDefinitions)
                .HasForeignKey(d => d.AssuranceScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceAutomatedControlTestDefinition_AssuranceSchedule");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AssuranceAutomatedControlTestDefinitions)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceAutomatedControlTestDefinition_AspNetUsers");
        });

        modelBuilder.Entity<AssuranceAutomatedControlTestExecutedOutcome>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AssuranceAnswer).IsRequired();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.TestType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TextValues).IsRequired();

            entity.HasOne(d => d.AssuranceAutomatedControlTestBatchRun).WithMany(p => p.AssuranceAutomatedControlTestExecutedOutcomes)
                .HasForeignKey(d => d.AssuranceAutomatedControlTestBatchRunId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceAutomatedControlTestExecutedOutcomes_AssuranceAutomatedControlTestExecutedOutcomes");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AssuranceAutomatedControlTestExecutedOutcomes)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceAutomatedControlTestExecutedOutcomes_AspNetUsers");
        });

        modelBuilder.Entity<AssuranceProgram>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreateedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceProgramCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssurancePrograms_AspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.AssuranceProgramOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssurancePrograms_AspNetUsers1");
        });

        modelBuilder.Entity<AssuranceSchedule>(entity =>
        {
            entity.ToTable("AssuranceSchedule");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CollectorCommencementReminder).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.CollectorCompletionReminder).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DivisionsFilter).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.EndDt)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.FilteredDivisions).HasDefaultValue(1);
            entity.Property(e => e.FrequencySettings).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.IncompleteAuditExpiry).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OwnerCommencementReminder).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OwnerCompletionReminder).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.QuotaQuantity).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ScheduleEnabled).HasDefaultValue(1);
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssuranceProgram).WithMany(p => p.AssuranceSchedules)
                .HasForeignKey(d => d.AssuranceProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSchedule_AssurancePrograms");

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.AssuranceSchedules)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSchedule_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceScheduleCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSchedule_CratedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.AssuranceSchedules)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSchedule_Divisions");

            entity.HasOne(d => d.Owner).WithMany(p => p.AssuranceScheduleOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSchedule_AspNetUsers");

            entity.HasMany(d => d.Improvements).WithMany(p => p.AssuranceSchedules)
                .UsingEntity<Dictionary<string, object>>(
                    "AssuranceScheduleLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssuranceScheduleLinkImprovement_Improvements"),
                    l => l.HasOne<AssuranceSchedule>().WithMany()
                        .HasForeignKey("AssuranceScheduleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AssuranceScheduleLinkImprovement_AssuranceSchedule"),
                    j =>
                    {
                        j.HasKey("AssuranceScheduleId", "ImprovementId");
                        j.ToTable("AssuranceScheduleLinkImprovement");
                    });
        });

        modelBuilder.Entity<AssuranceScheduleUser>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.AssuranceSchedule).WithMany(p => p.AssuranceScheduleUsers)
                .HasForeignKey(d => d.AssuranceScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceScheduleUsers_AssuranceSchedule");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceScheduleUserCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceScheduleUsers_AspNetUsers1");

            entity.HasOne(d => d.User).WithMany(p => p.AssuranceScheduleUserUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceScheduleUsers_AspNetUsers");
        });

        modelBuilder.Entity<AssuranceSubmissionLog>(entity =>
        {
            entity.ToTable("AssuranceSubmissionLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.SubmissionJSON).IsRequired();

            entity.HasOne(d => d.AssuranceProgram).WithMany(p => p.AssuranceSubmissionLogs)
                .HasForeignKey(d => d.AssuranceProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionLog_AssurancePrograms");

            entity.HasOne(d => d.AssuranceSchedule).WithMany(p => p.AssuranceSubmissionLogs)
                .HasForeignKey(d => d.AssuranceScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionLog_AssuranceSchedule");

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.AssuranceSubmissionLogs)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionLog_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceSubmissionLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionLog_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.AssuranceSubmissionLogs)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionLog_Divisions");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessed>(entity =>
        {
            entity.ToTable("AssuranceSubmissionProcessed");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ScoringBandBGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ScoringBandFGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ScoringBandName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.AssuranceSubmissionProcesseds)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessed_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceSubmissionProcesseds)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessed_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.AssuranceSubmissionProcesseds)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessed_Divisions");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssuranceProcessedComments");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TimeStamp).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.AssuranceSubmissionProcessed).WithMany(p => p.AssuranceSubmissionProcessedComments)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceProcessedComments_AssuranceSubmissionProcessed");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.AssuranceSubmissionProcessedComments)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedComments_AspNetUsers");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedGrouping>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GroupName).IsRequired();

            entity.HasOne(d => d.AssuranceSubmissionProcessed).WithMany(p => p.AssuranceSubmissionProcessedGroupings)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedGroupings_AssuranceSubmissionProcessed");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedResponsesDocsWeighting>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.indicator)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedResponsesStructured>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssuranceSubmissionResponsesStructured");

            entity.ToTable("AssuranceSubmissionProcessedResponsesStructured");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();

            entity.HasOne(d => d.AssuranceSubmissionProcessed).WithMany(p => p.AssuranceSubmissionProcessedResponsesStructureds)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionResponsesStructured_AssuranceSubmissionProcessed");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedResponsesUnStructured>(entity =>
        {
            entity.ToTable("AssuranceSubmissionProcessedResponsesUnStructured");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DisplayId).HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();

            entity.HasOne(d => d.AssuranceSubmissionprocessed).WithMany(p => p.AssuranceSubmissionProcessedResponsesUnStructureds)
                .HasForeignKey(d => d.AssuranceSubmissionprocessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedResponsesUnStructured_AssuranceSubmissionProcessed");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedResponsesUnStructuredAnswer>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.AnswerBGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AnswerFGColor)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssuranceSubmissionProcessedResponsesUnStructured).WithMany(p => p.AssuranceSubmissionProcessedResponsesUnStructuredAnswers)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedResponsesUnStructuredId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedResponsesUnStructuredAnswers_AssuranceSubmissionProcessedResponsesUnStructured");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedRisksStandardsActsWeighting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AssuranceSubmissionProcessedRisksStandardsActs");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Indicator)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();

            entity.HasOne(d => d.AssuranceSubmissionprocessed).WithMany(p => p.AssuranceSubmissionProcessedRisksStandardsActsWeightings)
                .HasForeignKey(d => d.AssuranceSubmissionprocessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedRisksStandardsActs_AssuranceSubmissionProcessed");

            entity.HasOne(d => d.RisksStandardsActs).WithMany(p => p.AssuranceSubmissionProcessedRisksStandardsActsWeightings)
                .HasForeignKey(d => d.RisksStandardsActsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedRisksStandardsActs_RisksStandardsActs");
        });

        modelBuilder.Entity<AssuranceSubmissionProcessedVoiceTranscriptionAndSentiment>(entity =>
        {
            entity.ToTable("AssuranceSubmissionProcessedVoiceTranscriptionAndSentiment");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TranscribedText).IsRequired();

            entity.HasOne(d => d.AssuranceSubmissionProcessed).WithMany(p => p.AssuranceSubmissionProcessedVoiceTranscriptionAndSentiments)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionProcessedVoiceTranscriptionAndSentiment_AssuranceSubmissionProcessed");
        });

        modelBuilder.Entity<AssuranceSubmissionprocessedResponsesStructuredAnswer>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.AnswerBGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AnswerFGColor)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssuranceSubmissionProcessedResponsesStructured).WithMany(p => p.AssuranceSubmissionprocessedResponsesStructuredAnswers)
                .HasForeignKey(d => d.AssuranceSubmissionProcessedResponsesStructuredId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceSubmissionprocessedResponsesStructuredAnswers_AssuranceSubmissionProcessedResponsesStructured");
        });

        modelBuilder.Entity<AssuranceTemplate>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreaetdDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TemplateJSON).IsRequired();

            entity.HasOne(d => d.AssuranceProgram).WithMany(p => p.AssuranceTemplates)
                .HasForeignKey(d => d.AssuranceProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceTemplates_AssurancePrograms");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceTemplateCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceTemplates_CreatedAspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.AssuranceTemplateOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceTemplates_OwnerAspNetUsers");
        });

        modelBuilder.Entity<AssuranceTemplatesScoringBand>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.AssuranceTemplatesScoringBands)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceTemplatesScoringBands_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceTemplatesScoringBands)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceTemplatesScoringBands_AspNetUsers");
        });

        modelBuilder.Entity<AssuranceVoiceStaging>(entity =>
        {
            entity.ToTable("AssuranceVoiceStaging");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AudioFile).IsRequired();
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.JSONData).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
        });

        modelBuilder.Entity<AssuranceVoiceTestTemplate>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TestJSON).IsRequired();

            entity.HasOne(d => d.AssuranceProgram).WithMany(p => p.AssuranceVoiceTestTemplates)
                .HasForeignKey(d => d.AssuranceProgramId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceVoiceTestTemplates_AssurancePrograms");

            entity.HasOne(d => d.AssuranceSchedule).WithMany(p => p.AssuranceVoiceTestTemplates)
                .HasForeignKey(d => d.AssuranceScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceVoiceTestTemplates_AssuranceSchedule");

            entity.HasOne(d => d.AssuranceTemplate).WithMany(p => p.AssuranceVoiceTestTemplates)
                .HasForeignKey(d => d.AssuranceTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceVoiceTestTemplates_AssuranceTemplates");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.AssuranceVoiceTestTemplates)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceVoiceTestTemplates_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.AssuranceVoiceTestTemplates)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssuranceVoiceTestTemplates_Divisions");
        });

        modelBuilder.Entity<Attachment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BlobUri).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.FileAnnotation).IsRequired();
            entity.Property(e => e.FileExtension)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FileName).IsRequired();
            entity.Property(e => e.RefTable).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
        });

        modelBuilder.Entity<BCPLibrary>(entity =>
        {
            entity.ToTable("BCPLibrary");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BCPJSON).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.BCPLibraryCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BCPLibrary_AspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.BCPLibraryOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BCPLibrary_AspNetUsers1");
        });

        modelBuilder.Entity<BusinessContinuityPlan>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BCPJSON).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EndDt).HasColumnType("datetime");
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.BCPLibrary).WithMany(p => p.BusinessContinuityPlans)
                .HasForeignKey(d => d.BCPLibraryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlans_BCPLibrary");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.BusinessContinuityPlanCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlans_AspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.BusinessContinuityPlanOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlans_AspNetUsers1");

            entity.HasMany(d => d.IssueActionTasks).WithMany(p => p.BusinessContinuityPlans)
                .UsingEntity<Dictionary<string, object>>(
                    "BusinessContinuityPlansLinkAction",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssueActionTaskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BusinessContinuityPlanLinkActions_IssuesActionsTasks"),
                    l => l.HasOne<BusinessContinuityPlan>().WithMany()
                        .HasForeignKey("BusinessContinuityPlanId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_BusinessContinuityPlanLinkActions_BusinessContinuityPlans"),
                    j =>
                    {
                        j.HasKey("BusinessContinuityPlanId", "IssueActionTaskId").HasName("PK_BusinessContinuityPlanLinkActions");
                        j.ToTable("BusinessContinuityPlansLinkActions");
                    });
        });

        modelBuilder.Entity<BusinessContinuityPlansComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BusinessContinuityPlanComments");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.BusinessContinuityPlan).WithMany(p => p.BusinessContinuityPlansComments)
                .HasForeignKey(d => d.BusinessContinuityPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlanComments_BusinessContinuityPlans");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.BusinessContinuityPlansComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlanComments_AspNetUsers");
        });

        modelBuilder.Entity<BusinessContinuityPlansLinkActionTask>(entity =>
        {
            entity.HasKey(e => new { e.BusinessContinuityPlanId, e.IssuesActionsTasksActionId, e.IssuesActionsTasksTaskId }).HasName("PK_BusinessContinuityPlanLinkActionTasks");

            entity.HasOne(d => d.BusinessContinuityPlan).WithMany(p => p.BusinessContinuityPlansLinkActionTasks)
                .HasForeignKey(d => d.BusinessContinuityPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlanLinkActionTasks_BusinessContinuityPlans");

            entity.HasOne(d => d.IssuesActionsTasksAction).WithMany(p => p.BusinessContinuityPlansLinkActionTaskIssuesActionsTasksActions)
                .HasForeignKey(d => d.IssuesActionsTasksActionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlanLinkActionTasks_IssuesActionsTasksAction");

            entity.HasOne(d => d.IssuesActionsTasksTask).WithMany(p => p.BusinessContinuityPlansLinkActionTaskIssuesActionsTasksTasks)
                .HasForeignKey(d => d.IssuesActionsTasksTaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BusinessContinuityPlanLinkActionTasks_IssuesActionsTasks");
        });

        modelBuilder.Entity<ComplaintsOrCompliment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Commentary).IsRequired();
            entity.Property(e => e.Contact).IsRequired();
            entity.Property(e => e.ContactAddress).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ContactEmail).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(50)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InitialResponse).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Outcome).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OwnerId)
                .HasMaxLength(450)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Priority).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.ResolutionDt)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.ResolutionRequiredDt)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ComplaintsOrComplimentCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComplaintsOrCompliments_CreatedAspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.ComplaintsOrComplimentOwners)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK_ComplaintsOrCompliments_AspNetUsers");

            entity.HasMany(d => d.Improvements).WithMany(p => p.ComplaintOrCompliments)
                .UsingEntity<Dictionary<string, object>>(
                    "ComplaintOrComplimentLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ComplaintOrComplimentLinkImprovement_Improvements"),
                    l => l.HasOne<ComplaintsOrCompliment>().WithMany()
                        .HasForeignKey("ComplaintOrComplimentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ComplaintOrComplimentLinkImprovement_ComplaintsOrCompliments"),
                    j =>
                    {
                        j.HasKey("ComplaintOrComplimentId", "ImprovementId");
                        j.ToTable("ComplaintOrComplimentLinkImprovement");
                    });

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.ComplaintsOrCompliments)
                .UsingEntity<Dictionary<string, object>>(
                    "ComplaintsOrComplimentsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ComplaintsOrComplimentsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<ComplaintsOrCompliment>().WithMany()
                        .HasForeignKey("ComplaintsOrComplimentsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ComplaintsOrComplimentsLinkIssuesActionsTasks_ComplaintsOrCompliments"),
                    j =>
                    {
                        j.HasKey("ComplaintsOrComplimentsId", "IssuesActionsTasksId");
                        j.ToTable("ComplaintsOrComplimentsLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<ComplaintsOrComplimentsComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CratedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.ComplaintsOrCompliments).WithMany(p => p.ComplaintsOrComplimentsComments)
                .HasForeignKey(d => d.ComplaintsOrComplimentsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComplaintsOrComplimentsComments_ComplaintsOrCompliments");

            entity.HasOne(d => d.CratedBy).WithMany(p => p.ComplaintsOrComplimentsComments)
                .HasForeignKey(d => d.CratedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ComplaintsOrComplimentsComments_AspNetUsers");
        });

        modelBuilder.Entity<CredScraperFile>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FileName)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
        });

        modelBuilder.Entity<CredScraperGoverningBody>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredScraperGoverningBodies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredScraperGoverningBodies_AspNetUsers");
        });

        modelBuilder.Entity<CredScraperUserRecord>(entity =>
        {
            entity.ToTable("CredScraperUserRecord");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastScrapeFile).IsRequired();
            entity.Property(e => e.RegistrationId).IsRequired();
            entity.Property(e => e.ReportsToUserId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredScraperUserRecordCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredScraperUserRecord_AspNetUsers1");

            entity.HasOne(d => d.GoverningBody).WithMany(p => p.CredScraperUserRecords)
                .HasForeignKey(d => d.GoverningBodyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredScraperUserRecord_CredScraperGoverningBodies");

            entity.HasOne(d => d.ReportsToUser).WithMany(p => p.CredScraperUserRecordReportsToUsers)
                .HasForeignKey(d => d.ReportsToUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredScraperUserRecord_AspNetUsers");
        });

        modelBuilder.Entity<Credential>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatdById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CredentialStatus).IsRequired();
            entity.Property(e => e.DateOfExpiry).HasColumnType("datetime");
            entity.Property(e => e.DateOfObtainment).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.GovernanceOwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.GrantingBody).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RegistrationNumber).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatdBy).WithMany(p => p.CredentialCreatdBies)
                .HasForeignKey(d => d.CreatdById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Credentials_AspNetUsers");

            entity.HasOne(d => d.GovernanceOwner).WithMany(p => p.CredentialGovernanceOwners)
                .HasForeignKey(d => d.GovernanceOwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Credentials_GovernanceOwnerAspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.CredentialOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Credentials_OwnerAspNetUsers");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.Credentials)
                .UsingEntity<Dictionary<string, object>>(
                    "CredentialsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CredentialsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<Credential>().WithMany()
                        .HasForeignKey("CredentialsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CredentialsLinkIssuesActionsTasks_Credentials"),
                    j =>
                    {
                        j.HasKey("CredentialsId", "IssuesActionsTasksId");
                        j.ToTable("CredentialsLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<CredentialsCondition>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ConditionCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.ConditionEffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsConditions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsConditions_AspNetUsers");

            entity.HasOne(d => d.Credentials).WithMany(p => p.CredentialsConditions)
                .HasForeignKey(d => d.CredentialsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsConditions_Credentials");
        });

        modelBuilder.Entity<CredentialsConditionsPeriodicAcknowledgement>(entity =>
        {
            entity.ToTable("CredentialsConditionsPeriodicAcknowledgement");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AcknoweledgementDt).HasColumnType("datetime");
            entity.Property(e => e.AcknowledgementById).HasMaxLength(450);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.SentBody).IsRequired();
            entity.Property(e => e.SentDate).HasColumnType("datetime");
            entity.Property(e => e.SentSubject).IsRequired();
            entity.Property(e => e.SentTo).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AcknowledgementBy).WithMany(p => p.CredentialsConditionsPeriodicAcknowledgementAcknowledgementBies)
                .HasForeignKey(d => d.AcknowledgementById)
                .HasConstraintName("FK_CredentialsConditionsPeriodicAcknowledgement_AckByAspNetUsers");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsConditionsPeriodicAcknowledgementCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsConditionsPeriodicAcknowledgement_CreatedByAspNetUsers");

            entity.HasOne(d => d.CredentialsCondition).WithMany(p => p.CredentialsConditionsPeriodicAcknowledgements)
                .HasForeignKey(d => d.CredentialsConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsConditionsPeriodicAcknowledgement_CredentialsConditions");
        });

        modelBuilder.Entity<CredentialsNotation>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NotationCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.NotationEffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsNotations)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsNotations_AspNetUsers");

            entity.HasOne(d => d.Credentials).WithMany(p => p.CredentialsNotations)
                .HasForeignKey(d => d.CredentialsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsNotations_Credentials");
        });

        modelBuilder.Entity<CredentialsRegulatoryBody>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsRegulatoryBodies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsRegulatoryBodies_AspNetUsers");
        });

        modelBuilder.Entity<CredentialsReprimand>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RepremandCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.ReprimandEffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsReprimands)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Table_1_CreatedByAspNetUsers");

            entity.HasOne(d => d.Credentials).WithMany(p => p.CredentialsReprimands)
                .HasForeignKey(d => d.CredentialsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsReprimands_Credentials");
        });

        modelBuilder.Entity<CredentialsUndertaking>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UndertakingCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.UndertakingEffectiveDate).HasColumnType("datetime");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsUndertakings)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUndertakings_AspNetUsers");

            entity.HasOne(d => d.Credentials).WithMany(p => p.CredentialsUndertakings)
                .HasForeignKey(d => d.CredentialsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUndertakings_Credentials");
        });

        modelBuilder.Entity<CredentialsUserRegistration>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LastScrapedDt).HasColumnType("datetime");
            entity.Property(e => e.LineManagerUserId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RegistrationRef).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.CredentialsUserRegistrationCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUserRegistrations_AspNetUsers");

            entity.HasOne(d => d.CredentialsRegulatoryBody).WithMany(p => p.CredentialsUserRegistrations)
                .HasForeignKey(d => d.CredentialsRegulatoryBodyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUserRegistrations_CredentialsRegulatoryBodies");

            entity.HasOne(d => d.LineManagerUser).WithMany(p => p.CredentialsUserRegistrationLineManagerUsers)
                .HasForeignKey(d => d.LineManagerUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUserRegistrations_AspNetUsers1");

            entity.HasOne(d => d.User).WithMany(p => p.CredentialsUserRegistrationUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CredentialsUserRegistrations_AspNetUsers2");
        });

        modelBuilder.Entity<DeviceCode>(entity =>
        {
            entity.HasKey(e => e.UserCode);

            entity.HasIndex(e => e.DeviceCode1, "IX_DeviceCodes_DeviceCode").IsUnique();

            entity.HasIndex(e => e.Expiration, "IX_DeviceCodes_Expiration");

            entity.Property(e => e.UserCode).HasMaxLength(200);
            entity.Property(e => e.ClientId)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Data).IsRequired();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.DeviceCode1)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("DeviceCode");
            entity.Property(e => e.SessionId).HasMaxLength(100);
            entity.Property(e => e.SubjectId).HasMaxLength(200);
        });

        modelBuilder.Entity<Division>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.Divisions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Divisions_AspNetUsers");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Divisions_Divisions");
        });

        modelBuilder.Entity<Doc>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DisplayPath).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Docs_CreatedByAspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.DocOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Docs_OwnerIdAspNetUsers");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_Docs_ParentDocs");
        });

        modelBuilder.Entity<DocsAccessLog>(entity =>
        {
            entity.ToTable("DocsAccessLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Action).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsAccessLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsAccessLog_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsAccessLogs)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsAccessLog_Docs");
        });

        modelBuilder.Entity<DocsDelegatedAuthority>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DelegationNotes).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EffectiveDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsDelegatedAuthorityCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsDelegatedAuthorities_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsDelegatedAuthorities)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsDelegatedAuthorities_Docs");

            entity.HasOne(d => d.User).WithMany(p => p.DocsDelegatedAuthorityUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsDelegatedAuthorities_UserAspNetUsers");
        });

        modelBuilder.Entity<DocsItem>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreaedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Title).IsRequired();
            entity.Property(e => e.Version)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsItemCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItems_CreatedByAspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsItems)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItems_Docs");

            entity.HasOne(d => d.Owner).WithMany(p => p.DocsItemOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItems_OwnerAspNetUsers");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.DocsItems)
                .UsingEntity<Dictionary<string, object>>(
                    "DocsItemsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DocsItemsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<DocsItem>().WithMany()
                        .HasForeignKey("DocsItemId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DocsItemsLinkIssuesActionsTasks_DocsItems"),
                    j =>
                    {
                        j.HasKey("DocsItemId", "IssuesActionsTasksId");
                        j.ToTable("DocsItemsLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<DocsItemComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsItemComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemComments_AspNetUsers");

            entity.HasOne(d => d.DocsItem).WithMany(p => p.DocsItemComments)
                .HasForeignKey(d => d.DocsItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemComments_DocsItems");
        });

        modelBuilder.Entity<DocsItemsExemption>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Createddt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DecisionDt).HasColumnType("datetime");
            entity.Property(e => e.DecisionUserId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ExemptionEffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.ExemptionExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.ExemptionRequest).IsRequired();
            entity.Property(e => e.RequestedEffectiveDate).HasColumnType("datetime");
            entity.Property(e => e.RequestedExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.RequestingUserId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsItemsExemptionCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemsExemptions_AspNetUsers");

            entity.HasOne(d => d.DecisionUser).WithMany(p => p.DocsItemsExemptionDecisionUsers)
                .HasForeignKey(d => d.DecisionUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemsExemptions_AspNetUsers1");

            entity.HasOne(d => d.DocsItem).WithMany(p => p.DocsItemsExemptions)
                .HasForeignKey(d => d.DocsItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemsExemptions_DocsItems");

            entity.HasOne(d => d.RequestingUser).WithMany(p => p.DocsItemsExemptionRequestingUsers)
                .HasForeignKey(d => d.RequestingUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsItemsExemptions_AspNetUsers2");
        });

        modelBuilder.Entity<DocsKnowledgeTransfer>(entity =>
        {
            entity.ToTable("DocsKnowledgeTransfer");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReadReceiptStatement).IsRequired();
            entity.Property(e => e.RequestDt).HasColumnType("datetime");
            entity.Property(e => e.RequiredDt).HasColumnType("datetime");
            entity.Property(e => e.status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsKnowledgeTransfers)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransfer_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsKnowledgeTransfers)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransfer_Docs");

            entity.HasOne(d => d.DocsItem).WithMany(p => p.DocsKnowledgeTransfers)
                .HasForeignKey(d => d.DocsItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransfer_DocsItems");
        });

        modelBuilder.Entity<DocsKnowledgeTransferUser>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AcknowledgementDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsKnowledgeTransferUserCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransferUsers_AspNetUsers");

            entity.HasOne(d => d.DocsKnowledgeTransfer).WithMany(p => p.DocsKnowledgeTransferUsers)
                .HasForeignKey(d => d.DocsKnowledgeTransferId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransferUsers_DocsKnowledgeTransfer");

            entity.HasOne(d => d.User).WithMany(p => p.DocsKnowledgeTransferUserUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsKnowledgeTransferUsers_AspNetUsers1");
        });

        modelBuilder.Entity<DocsLibraryItemsExemptionsCondition>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AcceptedByUserId).HasMaxLength(450);
            entity.Property(e => e.AcceptedDt).HasColumnType("datetime");
            entity.Property(e => e.Condution).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.AcceptedByUser).WithMany(p => p.DocsLibraryItemsExemptionsConditionAcceptedByUsers)
                .HasForeignKey(d => d.AcceptedByUserId)
                .HasConstraintName("FK_DocsLibraryItemsExemptionsConditions_AspNetUsers");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsLibraryItemsExemptionsConditionCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsLibraryItemsExemptionsConditions_AspNetUsers1");

            entity.HasOne(d => d.DocsItemsExemption).WithMany(p => p.DocsLibraryItemsExemptionsConditions)
                .HasForeignKey(d => d.DocsItemsExemptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsLibraryItemsExemptionsConditions_DocsItemsExemptions");
        });

        modelBuilder.Entity<DocsRelatedChildArtifact>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.Child).WithMany(p => p.DocsRelatedChildArtifacts)
                .HasForeignKey(d => d.ChildId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsRelatedChildArtifacts_DocsItems");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsRelatedChildArtifacts)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsRelatedChildArtifacts_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsRelatedChildArtifacts)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsRelatedChildArtifacts_Docs");
        });

        modelBuilder.Entity<DocsReview>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.NextRevewDt).HasColumnType("datetime");
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.ReviewCommentary).IsRequired();
            entity.Property(e => e.ReviewCompletedDt).HasColumnType("datetime");
            entity.Property(e => e.ReviewDt).HasColumnType("datetime");
            entity.Property(e => e.ReviewOutcome).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsReviewCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsReviews_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsReviews)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsReviews_Docs");

            entity.HasOne(d => d.DocsItem).WithMany(p => p.DocsReviews)
                .HasForeignKey(d => d.DocsItemId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsReviews_DocsItems");

            entity.HasOne(d => d.Owner).WithMany(p => p.DocsReviewOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsReviews_AspNetUsers1");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.DocsReviews)
                .UsingEntity<Dictionary<string, object>>(
                    "DocsReviewsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DocsReviewsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<DocsReview>().WithMany()
                        .HasForeignKey("DocsReviewId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_DocsReviewsLinkIssuesActionsTasks_DocsReviews"),
                    j =>
                    {
                        j.HasKey("DocsReviewId", "IssuesActionsTasksId");
                        j.ToTable("DocsReviewsLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<DocsSubscriptionUser>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreaetdDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.DisplayId).HasMaxLength(50);
            entity.Property(e => e.ExpiresDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocsSubscriptionUserCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsSubscriptionUsers_AspNetUsers");

            entity.HasOne(d => d.Docs).WithMany(p => p.DocsSubscriptionUsers)
                .HasForeignKey(d => d.DocsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsSubscriptionUsers_Docs");

            entity.HasOne(d => d.User).WithMany(p => p.DocsSubscriptionUserUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocsSubscriptionUsers_AspNetUsers1");
        });

        modelBuilder.Entity<DocstensExemptionsComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DicsUtensExemptionsComments");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.DocstensExemptionsComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DicsUtensExemptionsComments_AspNetUsers");

            entity.HasOne(d => d.DocsItemExemption).WithMany(p => p.DocstensExemptionsComments)
                .HasForeignKey(d => d.DocsItemExemptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DicsUtensExemptionsComments_DocsItemsExemptions");
        });

        modelBuilder.Entity<ENUMReference>(entity =>
        {
            entity.ToTable("ENUMReference");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ColumnName).IsRequired();
            entity.Property(e => e.EnumValue).IsRequired();
            entity.Property(e => e.TableName).IsRequired();
        });

        modelBuilder.Entity<Improvement>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CalculatedQualitative).HasMaxLength(50);
            entity.Property(e => e.CalulatedQuantitative).HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RequiredCompletionDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.StrategyDescription).IsRequired();
            entity.Property(e => e.SubmittedQualitative).HasMaxLength(50);
            entity.Property(e => e.SubmittedQuantitative).HasMaxLength(50);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Improvements_CreatedByAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.Improvements)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Improvements_Divisions");

            entity.HasOne(d => d.ImprovementType).WithMany(p => p.Improvements)
                .HasForeignKey(d => d.ImprovementTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Improvements_ImprovementTypes");

            entity.HasOne(d => d.Owner).WithMany(p => p.ImprovementOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Improvements_OwnerAspNetUsers");

            entity.HasMany(d => d.ImprovementChildren).WithMany(p => p.ImprovementParents)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementChildId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkImprovements_Improvements1"),
                    l => l.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementParentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkImprovements_Improvements"),
                    j =>
                    {
                        j.HasKey("ImprovementParentId", "ImprovementChildId");
                        j.ToTable("ImprovementsLinkImprovements");
                    });

            entity.HasMany(d => d.ImprovementParents).WithMany(p => p.ImprovementChildren)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementParentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkImprovements_Improvements"),
                    l => l.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementChildId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkImprovements_Improvements1"),
                    j =>
                    {
                        j.HasKey("ImprovementParentId", "ImprovementChildId");
                        j.ToTable("ImprovementsLinkImprovements");
                    });

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.Improvements)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkIssuesActionsTasks_Improvements"),
                    j =>
                    {
                        j.HasKey("ImprovementId", "IssuesActionsTasksId");
                        j.ToTable("ImprovementsLinkIssuesActionsTasks");
                    });

            entity.HasMany(d => d.RiskDiscoveries).WithMany(p => p.Improvements)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsLinkRiskDiscovery",
                    r => r.HasOne<RiskDiscovery>().WithMany()
                        .HasForeignKey("RiskDiscoveryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkRiskDiscoveries_RiskDiscovery"),
                    l => l.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkRiskDiscoveries_Improvements"),
                    j =>
                    {
                        j.HasKey("ImprovementId", "RiskDiscoveryId");
                        j.ToTable("ImprovementsLinkRiskDiscoveries");
                    });

            entity.HasMany(d => d.RisksStandardsActs).WithMany(p => p.Improvements)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsLinkRisksStandardsAct",
                    r => r.HasOne<RisksStandardsAct>().WithMany()
                        .HasForeignKey("RisksStandardsActsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkRisksStandardsActs_RisksStandardsActs"),
                    l => l.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsLinkRisksStandardsActs_Improvements"),
                    j =>
                    {
                        j.HasKey("ImprovementId", "RisksStandardsActsId");
                        j.ToTable("ImprovementsLinkRisksStandardsActs");
                    });
        });

        modelBuilder.Entity<ImprovementTeamMember>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementTeamMemberCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementTeamMembers_AspNetUsers1");

            entity.HasOne(d => d.Improvement).WithMany(p => p.ImprovementTeamMembers)
                .HasForeignKey(d => d.ImprovementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementTeamMembers_Improvements");

            entity.HasOne(d => d.User).WithMany(p => p.ImprovementTeamMemberUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementTeamMembers_AspNetUsers");
        });

        modelBuilder.Entity<ImprovementTool>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementTools)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementTools_AspNetUsers");
        });

        modelBuilder.Entity<ImprovementType>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementTypes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementTypes_AspNetUsers");
        });

        modelBuilder.Entity<ImprovementsDelivered>(entity =>
        {
            entity.ToTable("ImprovementsDelivered");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DeliveredImpovement).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ImpactToStrategy).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementsDelivereds)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementsDelivered_AspNetUsers");

            entity.HasOne(d => d.Improvement).WithMany(p => p.ImprovementsDelivereds)
                .HasForeignKey(d => d.ImprovementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementsDelivered_Improvements");
        });

        modelBuilder.Entity<ImprovementsObjective>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Baseline).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Measurement).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.QualitativeAssessment).HasMaxLength(50);
            entity.Property(e => e.QuantitativeAssessment).HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Target).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.ImprovementsObjectiveCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementsObjectives_CreatedByAspNetUsers");

            entity.HasOne(d => d.Improvement).WithMany(p => p.ImprovementsObjectives)
                .HasForeignKey(d => d.ImprovementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementsObjectives_Improvements");

            entity.HasOne(d => d.Owner).WithMany(p => p.ImprovementsObjectiveOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ImprovementsObjectives_OwnerAspNetUsers");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.ImprovementObjectives)
                .UsingEntity<Dictionary<string, object>>(
                    "ImprovementsObjectivesLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsObjectivesLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<ImprovementsObjective>().WithMany()
                        .HasForeignKey("ImprovementObjectiveId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ImprovementsObjectivesLinkIssuesActionsTasks_ImprovementsObjectives"),
                    j =>
                    {
                        j.HasKey("ImprovementObjectiveId", "IssuesActionsTasksId");
                        j.ToTable("ImprovementsObjectivesLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<Incident>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CompletedDt).HasColumnType("datetime");
            entity.Property(e => e.ContactDetails).IsRequired();
            entity.Property(e => e.ContactPerson).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MaximumReasonableOutcome).IsRequired();
            entity.Property(e => e.OwnerId).HasMaxLength(450);
            entity.Property(e => e.ReportedDt).HasColumnType("datetime");
            entity.Property(e => e.ReportingUserId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Incidents_CreatedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Incidents_Divisions");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentCategoryId)
                .HasConstraintName("FK_Incidents_IncidentCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.Incidents)
                .HasForeignKey(d => d.IncidentSeverityId)
                .HasConstraintName("FK_Incidents_IncidentSeverities");

            entity.HasOne(d => d.Owner).WithMany(p => p.IncidentOwners)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK_Incidents_AspNetUsers");

            entity.HasOne(d => d.ReportingUser).WithMany(p => p.IncidentReportingUsers)
                .HasForeignKey(d => d.ReportingUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Incidents_ReportingUserAspNetUsers");

            entity.HasMany(d => d.Improvements).WithMany(p => p.Incidents)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkImprovements_Improvements"),
                    l => l.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkImprovements_Incidents"),
                    j =>
                    {
                        j.HasKey("IncidentId", "ImprovementId");
                        j.ToTable("IncidentsLinkImprovements");
                    });

            entity.HasMany(d => d.IncidentChildren).WithMany(p => p.IncidentParents)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkIncident",
                    r => r.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentChildId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidents_Incidents"),
                    l => l.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentParentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidents_Incidents1"),
                    j =>
                    {
                        j.HasKey("IncidentParentId", "IncidentChildId");
                        j.ToTable("IncidentsLinkIncidents");
                    });

            entity.HasMany(d => d.IncidentParents).WithMany(p => p.IncidentChildren)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkIncident",
                    r => r.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentParentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidents_Incidents1"),
                    l => l.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentChildId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidents_Incidents"),
                    j =>
                    {
                        j.HasKey("IncidentParentId", "IncidentChildId");
                        j.ToTable("IncidentsLinkIncidents");
                    });

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.Incidents)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIssuesActionsTasks_Incidents"),
                    j =>
                    {
                        j.HasKey("IncidentId", "IssuesActionsTasksId");
                        j.ToTable("IncidentsLinkIssuesActionsTasks");
                    });

            entity.HasMany(d => d.Risks).WithMany(p => p.Incidents)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkRisk",
                    r => r.HasOne<Risk>().WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkRisks_Risks"),
                    l => l.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkRisks_Incidents"),
                    j =>
                    {
                        j.HasKey("IncidentId", "RiskId");
                        j.ToTable("IncidentsLinkRisks");
                    });
        });

        modelBuilder.Entity<IncidentsCannedBCP>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.BCPLibrary).WithMany(p => p.IncidentsCannedBCPs)
                .HasForeignKey(d => d.BCPLibraryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedBCPs_BCPLibrary");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsCannedBCPs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedBCPs_AspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentsCannedBCPs)
                .HasForeignKey(d => d.IncidentCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedBCPs_IncidentsCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.IncidentsCannedBCPs)
                .HasForeignKey(d => d.IncidentSeverityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedBCPs_IncidentsSeverities");
        });

        modelBuilder.Entity<IncidentsCannedReport>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DueDateOffset)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReportRequirements).IsRequired();
            entity.Property(e => e.ReportTo).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsCannedReports)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedReports_AspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentsCannedReports)
                .HasForeignKey(d => d.IncidentCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedReports_IncidentsCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.IncidentsCannedReports)
                .HasForeignKey(d => d.IncidentSeverityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsCannedReports_IncidentsSeverities");
        });

        modelBuilder.Entity<IncidentsCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentCategories");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsCategories)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentCategories_AspNetUsers");
        });

        modelBuilder.Entity<IncidentsDivisionOwner>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsDivisionOwnerCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsDivisionOwners_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.IncidentsDivisionOwners)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsDivisionOwners_Divisions");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentsDivisionOwners)
                .HasForeignKey(d => d.IncidentCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsDivisionOwners_IncidentCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.IncidentsDivisionOwners)
                .HasForeignKey(d => d.IncidentSeverityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsDivisionOwners_IncidentSeverities");

            entity.HasOne(d => d.User).WithMany(p => p.IncidentsDivisionOwnerUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsDivisionOwners_UserAspNetUsers");
        });

        modelBuilder.Entity<IncidentsEmergencyResponse>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsEmergencyResponses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsEmergencyResponses_AspNetUsers");

            entity.HasOne(d => d.IncidentEmergencyResponseType).WithMany(p => p.IncidentsEmergencyResponses)
                .HasForeignKey(d => d.IncidentEmergencyResponseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsEmergencyResponses_IncidentsEmergencyResponseTypes");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsEmergencyResponses)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsEmergencyResponses_Incidents");
        });

        modelBuilder.Entity<IncidentsEmergencyResponseType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentEmergencyResponseTypes");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ContactInstructions).IsRequired();
            entity.Property(e => e.ContactPhone).HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsEmergencyResponseTypes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentEmergencyResponseTypes_AspNetUsers");
        });

        modelBuilder.Entity<IncidentsExternalTeamMember>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Alias)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.OrganisationName).IsRequired();
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.RelationshipToIncident)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsExternalTeamMembers)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsExternalTeamMembers_AspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsExternalTeamMembers)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsExternalTeamMembers_Incidents");
        });

        modelBuilder.Entity<IncidentsFieldInvestigation>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FieldInvestigationFormJSON).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsFieldInvestigationCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigations_CreatedAspNetUsers");

            entity.HasOne(d => d.IncidentFieldIvestigationCategoryAndForm).WithMany(p => p.IncidentsFieldInvestigations)
                .HasForeignKey(d => d.IncidentFieldIvestigationCategoryAndFormId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigations_IncidentsFieldInvestigationCategoriesAndForms");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsFieldInvestigations)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigations_Incidents");

            entity.HasOne(d => d.Owner).WithMany(p => p.IncidentsFieldInvestigationOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigations_OwnerAspNetUsers");
        });

        modelBuilder.Entity<IncidentsFieldInvestigationCategoriesAndForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentFieldInvestigationCategoriesAndForms");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CratedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FormJSON).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TypeId).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsFieldInvestigationCategoriesAndForms)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentFieldInvestigationCategoriesAndForms_AspNetUsers");
        });

        modelBuilder.Entity<IncidentsFieldInvestigationExternalPartiesLinkIncident>(entity =>
        {
            entity.HasKey(e => new { e.IncidentsFieldInvestigationsExternalPartiesId, e.IncidentId });

            entity.HasOne(d => d.IncidentsFieldInvestigationsExternalParties).WithMany(p => p.IncidentsFieldInvestigationExternalPartiesLinkIncidents)
                .HasForeignKey(d => d.IncidentsFieldInvestigationsExternalPartiesId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationExternalPartiesLinkIncidents_IncidentsExternalTeamMembers");
        });

        modelBuilder.Entity<IncidentsFieldInvestigationSubmissionLog>(entity =>
        {
            entity.ToTable("IncidentsFieldInvestigationSubmissionLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FieldInvestigationSubmissionJSON).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsFieldInvestigationSubmissionLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationSubmissionLog_CreatedAspNetUsers");

            entity.HasOne(d => d.IncidentsFieldInvestigation).WithMany(p => p.IncidentsFieldInvestigationSubmissionLogs)
                .HasForeignKey(d => d.IncidentsFieldInvestigationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationSubmissionLog_IncidentsFieldInvestigations");

            entity.HasOne(d => d.IncidentsFieldIvestigationCategoryAndForms).WithMany(p => p.IncidentsFieldInvestigationSubmissionLogs)
                .HasForeignKey(d => d.IncidentsFieldIvestigationCategoryAndFormsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationSubmissionLog_IncidentsFieldInvestigationCategoriesAndForms");
        });

        modelBuilder.Entity<IncidentsFieldInvestigationsFormResult>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreqatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.QuestionKey)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionOptions)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.QuestionType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Response).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany()
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationsFormResults_AspNetUsers");

            entity.HasOne(d => d.IncidentsFieldInvestigation).WithMany()
                .HasForeignKey(d => d.IncidentsFieldInvestigationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsFieldInvestigationsFormResults_IncidentsFieldInvestigations");
        });

        modelBuilder.Entity<IncidentsInternalTeamMember>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Alias)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RelationshipToIncident)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsInternalTeamMemberCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsInternalTeamMembers_AspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsInternalTeamMembers)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsInternalTeamMembers_Incidents");

            entity.HasOne(d => d.User).WithMany(p => p.IncidentsInternalTeamMemberUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsInternalTeamMembers_UserAspNetUsers");

            entity.HasMany(d => d.Incidents).WithMany(p => p.IncidentsFieldInvestigationInternalTeamMembers)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsLinkIncidentsFieldInvestigationInternalTeamMember",
                    r => r.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidentsFieldInvestigationInternalTeamMembers_Incidents"),
                    l => l.HasOne<IncidentsInternalTeamMember>().WithMany()
                        .HasForeignKey("IncidentsFieldInvestigationInternalTeamMemberId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsLinkIncidentsFieldInvestigationInternalTeamMembers_IncidentsInternalTeamMembers"),
                    j =>
                    {
                        j.HasKey("IncidentsFieldInvestigationInternalTeamMemberId", "IncidentId");
                        j.ToTable("IncidentsLinkIncidentsFieldInvestigationInternalTeamMembers");
                    });
        });

        modelBuilder.Entity<IncidentsLessonsLearnt>(entity =>
        {
            entity.ToTable("IncidentsLessonsLearnt");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsLessonsLearnts)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsLessonsLearnt_AspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsLessonsLearnts)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsLessonsLearnt_Incidents");
        });

        modelBuilder.Entity<IncidentsLessonsLearntKeyword>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentLessonsLearntKeywords");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Keyword)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsLessonsLearntKeywords)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentLessonsLearntKeywords_AspNetUsers");

            entity.HasOne(d => d.IncidentLessonsLearnt).WithMany(p => p.IncidentsLessonsLearntKeywords)
                .HasForeignKey(d => d.IncidentLessonsLearntId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentLessonsLearntKeywords_IncidentsLessonsLearnt");
        });

        modelBuilder.Entity<IncidentsRPOLibrary>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentRPOLibrary");

            entity.ToTable("IncidentsRPOLibrary");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsRPOLibraries)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRPOLibrary_AspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentsRPOLibraries)
                .HasForeignKey(d => d.IncidentCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRPOLibrary_IncidentCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.IncidentsRPOLibraries)
                .HasForeignKey(d => d.IncidentSeverityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRPOLibrary_IncidentSeverities");
        });

        modelBuilder.Entity<IncidentsRPOLibraryLinkIncident>(entity =>
        {
            entity.HasKey(e => new { e.IncidentRPOLibraryId, e.IncidentId }).HasName("PK_IncidentRPOLibraryLinkIncidents");

            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RPOCommentBy).HasMaxLength(450);
            entity.Property(e => e.RPOCreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsRPOLibraryLinkIncidents)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRPOLibraryLinkIncidents_Incidents");

            entity.HasOne(d => d.IncidentRPOLibrary).WithMany(p => p.IncidentsRPOLibraryLinkIncidents)
                .HasForeignKey(d => d.IncidentRPOLibraryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRPOLibraryLinkIncidents_IncidentsRPOLibrary");
        });

        modelBuilder.Entity<IncidentsRTOLibrary>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentRTOLibrary");

            entity.ToTable("IncidentsRTOLibrary");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.RTODurationOffset)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsRTOLibraries)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRTOLibrary_AspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.IncidentsRTOLibraries)
                .HasForeignKey(d => d.IncidentCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRTOLibrary_IncidentCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.IncidentsRTOLibraries)
                .HasForeignKey(d => d.IncidentSeverityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentRTOLibrary_IncidentSeverities");
        });

        modelBuilder.Entity<IncidentsRTOLibraryLinkIncident>(entity =>
        {
            entity.HasKey(e => e.IncidentsRTOLibraryId);

            entity.Property(e => e.IncidentsRTOLibraryId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CommentById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.RTOAchieved).HasDefaultValue(1);
            entity.Property(e => e.RTODt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CommentBy).WithMany(p => p.IncidentsRTOLibraryLinkIncidentCommentBies)
                .HasForeignKey(d => d.CommentById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsRTOLibraryLinkIncidents_CommentByAspNetUsers");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsRTOLibraryLinkIncidentCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsRTOLibraryLinkIncidents_CreatedAspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsRTOLibraryLinkIncidents)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsRTOLibraryLinkIncidents_Incidents");

            entity.HasOne(d => d.IncidentsRTOLibrary).WithOne(p => p.IncidentsRTOLibraryLinkIncident)
                .HasForeignKey<IncidentsRTOLibraryLinkIncident>(d => d.IncidentsRTOLibraryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsRTOLibraryLinkIncidents_IncidentsRTOLibrary");
        });

        modelBuilder.Entity<IncidentsReport>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsReports)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsReports_AspNetUsers");

            entity.HasOne(d => d.IncidentCannedReports).WithMany(p => p.IncidentsReports)
                .HasForeignKey(d => d.IncidentCannedReportsId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsReports_IncidentsCannedReports");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsReports)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsReports_Incidents");
        });

        modelBuilder.Entity<IncidentsReportsComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsReportsComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsReportsComments_AspNetUsers");

            entity.HasOne(d => d.IncidentReport).WithMany(p => p.IncidentsReportsComments)
                .HasForeignKey(d => d.IncidentReportId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsReportsComments_IncidentsReports");
        });

        modelBuilder.Entity<IncidentsSeverity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IncidentSeverities");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsSeverities)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSeverities_AspNetUsers");
        });

        modelBuilder.Entity<IncidentsSnapChartCausalFactor>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsSnapChartCausalFactors)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSnapChartCausalFactors_AspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsSnapChartCausalFactors)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSnapChartCausalFactors_Incidents");

            entity.HasOne(d => d.IncidentsSnapChartLog).WithMany(p => p.IncidentsSnapChartCausalFactors)
                .HasForeignKey(d => d.IncidentsSnapChartLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSnapChartCausalFactors_IncidentsSnapChartLog");
        });

        modelBuilder.Entity<IncidentsSnapChartLog>(entity =>
        {
            entity.ToTable("IncidentsSnapChartLog");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SnapChartJSON).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsSnapChartLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSnapChartLog_AspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsSnapChartLogs)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsSnapChartLog_Incidents");
        });

        modelBuilder.Entity<IncidentsStatementsOfNeed>(entity =>
        {
            entity.ToTable("IncidentsStatementsOfNeed");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.EndorsementCommentary).IsRequired();
            entity.Property(e => e.EndorsementDate).HasColumnType("datetime");
            entity.Property(e => e.EndorsementDecisionById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IncidentsStatementsOfNeedCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsStatementsOfNeed_CreatedAspNetUsers");

            entity.HasOne(d => d.Incident).WithMany(p => p.IncidentsStatementsOfNeeds)
                .HasForeignKey(d => d.IncidentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsStatementsOfNeed_Incidents");

            entity.HasOne(d => d.Owner).WithMany(p => p.IncidentsStatementsOfNeedOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncidentsStatementsOfNeed_OwnerAspNetUsers");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.IncidentsStatementOfNeeds)
                .UsingEntity<Dictionary<string, object>>(
                    "IncidentsStatementsOfNeedLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsStatementsOfNeedLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<IncidentsStatementsOfNeed>().WithMany()
                        .HasForeignKey("IncidentsStatementOfNeedId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_IncidentsStatementsOfNeedLinkIssuesActionsTasks_IncidentsStatementsOfNeed"),
                    j =>
                    {
                        j.HasKey("IncidentsStatementOfNeedId", "IssuesActionsTasksId");
                        j.ToTable("IncidentsStatementsOfNeedLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<InternalAudit>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActualEndDt).HasColumnType("datetime");
            entity.Property(e => e.ActualStartDt).HasColumnType("datetime");
            entity.Property(e => e.BusinessUnit).IsRequired();
            entity.Property(e => e.BusinessUnitCommentsById).HasMaxLength(450);
            entity.Property(e => e.BusinessValueProposition).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TargetEndDt).HasColumnType("datetime");
            entity.Property(e => e.TargetStartDt).HasColumnType("datetime");

            entity.HasOne(d => d.BusinessUnitCommentsBy).WithMany(p => p.InternalAuditBusinessUnitCommentsBies)
                .HasForeignKey(d => d.BusinessUnitCommentsById)
                .HasConstraintName("FK_InternalAudits_AspNetUsers2");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.InternalAuditCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAudits_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.InternalAudits)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAudits_Divisions");

            entity.HasOne(d => d.Owner).WithMany(p => p.InternalAuditOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAudits_AspNetUsers1");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.InternalAudits)
                .UsingEntity<Dictionary<string, object>>(
                    "InternalAuditsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InternalAuditLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<InternalAudit>().WithMany()
                        .HasForeignKey("InternalAuditId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InternalAuditLinkIssuesActionsTasks_InternalAudits"),
                    j =>
                    {
                        j.HasKey("InternalAuditId", "IssuesActionsTasksId").HasName("PK_InternalAuditLinkIssuesActionsTasks");
                        j.ToTable("InternalAuditsLinkIssuesActionsTasks");
                    });

            entity.HasMany(d => d.RiskStandardActs).WithMany(p => p.InternalAudits)
                .UsingEntity<Dictionary<string, object>>(
                    "InternalAuditsLinkRiskScenarioAct",
                    r => r.HasOne<RisksStandardsAct>().WithMany()
                        .HasForeignKey("RiskStandardActId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InternalAuditsLinkRiskScenarioActs_RisksStandardsActs"),
                    l => l.HasOne<InternalAudit>().WithMany()
                        .HasForeignKey("InternalAuditId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_InternalAuditsLinkRiskScenarioActs_InternalAudits"),
                    j =>
                    {
                        j.HasKey("InternalAuditId", "RiskStandardActId");
                        j.ToTable("InternalAuditsLinkRiskScenarioActs");
                    });
        });

        modelBuilder.Entity<InternalAuditPlan>(entity =>
        {
            entity.ToTable("InternalAuditPlan");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Descirption).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TargetEndDt).HasColumnType("datetime");
            entity.Property(e => e.TargetStartDt).HasColumnType("datetime");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.InternalAuditPlanCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlan_CreatedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.InternalAuditPlans)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlan_Divisions");

            entity.HasOne(d => d.Owner).WithMany(p => p.InternalAuditPlanOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlan_AspNetUsers");
        });

        modelBuilder.Entity<InternalAuditPlanResource>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EndDt).HasColumnType("datetime");
            entity.Property(e => e.RoleInAudit)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.InternalAuditPlanResourceCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlanResources_createdAspNetUsers1");

            entity.HasOne(d => d.InternalAuditPlan).WithMany(p => p.InternalAuditPlanResources)
                .HasForeignKey(d => d.InternalAuditPlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlanResources_InternalAuditPlan");

            entity.HasOne(d => d.User).WithMany(p => p.InternalAuditPlanResourceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditPlanResources_AspNetUsers");
        });

        modelBuilder.Entity<InternalAuditResource>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EndDt).HasColumnType("datetime");
            entity.Property(e => e.RoleInAudit)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.InternalAuditResourceCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditResources_AspNetUsers");

            entity.HasOne(d => d.InternalAudit).WithMany(p => p.InternalAuditResources)
                .HasForeignKey(d => d.InternalAuditId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditResources_InternalAudits");

            entity.HasOne(d => d.User).WithMany(p => p.InternalAuditResourceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InternalAuditResources_AspNetUsers1");
        });

        modelBuilder.Entity<IssuesActionTaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_IssueActionTaskTypes");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BaseOwnerId).HasMaxLength(450);
            entity.Property(e => e.CreatedById).HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId).HasMaxLength(50);
            entity.Property(e => e.Enabled).HasDefaultValue(true);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.SystemType).HasDefaultValue(true);

            entity.HasOne(d => d.BaseOwner).WithMany(p => p.IssuesActionTaskTypeBaseOwners)
                .HasForeignKey(d => d.BaseOwnerId)
                .HasConstraintName("FK_IssuesActionTaskTypes_AspNetUsers");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IssuesActionTaskTypeCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .HasConstraintName("FK_IssueActionTaskTypes_AspNetUsers");
        });

        modelBuilder.Entity<IssuesActionsTask>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AllocatedToId).HasMaxLength(450);
            entity.Property(e => e.Contact).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.IATCategory).HasDefaultValue(1);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.AllocatedTo).WithMany(p => p.IssuesActionsTaskAllocatedTos)
                .HasForeignKey(d => d.AllocatedToId)
                .HasConstraintName("FK_IssuesActionsTasksAllocatedTo_AspNetUsers");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IssuesActionsTaskCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksCreatedById_AspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.IssuesActionsTasks)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasks_Divisions");

            entity.HasOne(d => d.IATType).WithMany(p => p.IssuesActionsTasks)
                .HasForeignKey(d => d.IATTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasks_IssueActionTaskTypes");

            entity.HasOne(d => d.Urgency).WithMany(p => p.IssuesActionsTasks)
                .HasForeignKey(d => d.UrgencyId)
                .HasConstraintName("FK_IssuesActionsTasks_IssuesActionsTasksUrgencyAndOffset");
        });

        modelBuilder.Entity<IssuesActionsTasksComment>(entity =>
        {
            entity.Property(e => e.id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Enabled).HasDefaultValue(true);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IssuesActionsTasksComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksComments_AspNetUsers");

            entity.HasOne(d => d.IAT).WithMany(p => p.IssuesActionsTasksComments)
                .HasForeignKey(d => d.IATID)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksComments_IssuesActionsTasks");
        });

        modelBuilder.Entity<IssuesActionsTasksDivisionOwnerOverride>(entity =>
        {
            entity.ToTable("IssuesActionsTasksDivisionOwnerOverride");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.IssuesActionsTasksDivisionOwnerOverrideCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksDivisionOwnerOverride_CreatedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.IssuesActionsTasksDivisionOwnerOverrides)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksDivisionOwnerOverride_Divisions");

            entity.HasOne(d => d.IssueActionTaskType).WithMany(p => p.IssuesActionsTasksDivisionOwnerOverrides)
                .HasForeignKey(d => d.IssueActionTaskTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksDivisionOwnerOverride_IssuesActionTaskTypes");

            entity.HasOne(d => d.Owner).WithMany(p => p.IssuesActionsTasksDivisionOwnerOverrideOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksDivisionOwnerOverride_AspNetUsers");
        });

        modelBuilder.Entity<IssuesActionsTasksLinkToSelf>(entity =>
        {
            entity.HasKey(e => new { e.IssueActionTypeParentId, e.IssueActionTypeChildId }).HasName("PK_IssuesActionsTasksLinkToSelf_1");

            entity.ToTable("IssuesActionsTasksLinkToSelf");

            entity.HasOne(d => d.IssueActionTypeParent).WithMany(p => p.IssuesActionsTasksLinkToSelves)
                .HasForeignKey(d => d.IssueActionTypeParentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksLinkToSelf_IssuesActionsTasks");
        });

        modelBuilder.Entity<IssuesActionsTasksUrgencyAndOffset>(entity =>
        {
            entity.ToTable("IssuesActionsTasksUrgencyAndOffset");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedBy)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DueDateOffset).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValue("ENABLED");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.IssuesActionsTasksUrgencyAndOffsets)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IssuesActionsTasksUrgencyAndOffset_AspNetUsers");
        });

        modelBuilder.Entity<Key>(entity =>
        {
            entity.HasIndex(e => e.Use, "IX_Keys_Use");

            entity.Property(e => e.Algorithm)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Data).IsRequired();
        });

        modelBuilder.Entity<PersistedGrant>(entity =>
        {
            entity.HasKey(e => e.Key);

            entity.HasIndex(e => e.Expiration, "IX_PersistedGrants_Expiration");

            entity.HasIndex(e => new { e.SubjectId, e.ClientId, e.Type }, "IX_PersistedGrants_SubjectId_ClientId_Type");

            entity.Property(e => e.Key).HasMaxLength(200);
            entity.Property(e => e.ClientId)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Data).IsRequired();
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.SessionId).HasMaxLength(100);
            entity.Property(e => e.SubjectId).HasMaxLength(200);
            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<RegulatoryEngagement>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EndDt).HasColumnType("datetime");
            entity.Property(e => e.How).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.StartDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TargetEndDt).HasColumnType("datetime");
            entity.Property(e => e.What).IsRequired();
            entity.Property(e => e.WhenDt).HasColumnType("datetime");
            entity.Property(e => e.Who).IsRequired();
            entity.Property(e => e.Why).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagements_CreatedAspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.RegulatoryEngagementOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagements_OwnerAspNetUsers");

            entity.HasOne(d => d.RegulatoryEngagementBody).WithMany(p => p.RegulatoryEngagements)
                .HasForeignKey(d => d.RegulatoryEngagementBodyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagements_RegulatoryEngagementBody");

            entity.HasOne(d => d.WhereDivision).WithMany(p => p.RegulatoryEngagements)
                .HasForeignKey(d => d.WhereDivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagements_Divisions");

            entity.HasMany(d => d.RegulatoryEngagementBodyContacts).WithMany(p => p.RegulatoryEngagements)
                .UsingEntity<Dictionary<string, object>>(
                    "RegulatoryEngagementsLinkRegulaotyrEngagementBodyContact",
                    r => r.HasOne<RegulatoryEngagementBodyContact>().WithMany()
                        .HasForeignKey("RegulatoryEngagementBodyContactId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RegulatoryEngagementsLinkRegulaotyrEngagementBodyContacts_RegulatoryEngagementBodyContacts"),
                    l => l.HasOne<RegulatoryEngagement>().WithMany()
                        .HasForeignKey("RegulatoryEngagementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RegulatoryEngagementsLinkRegulaotyrEngagementBodyContacts_RegulatoryEngagements"),
                    j =>
                    {
                        j.HasKey("RegulatoryEngagementId", "RegulatoryEngagementBodyContactId");
                        j.ToTable("RegulatoryEngagementsLinkRegulaotyrEngagementBodyContacts");
                    });
        });

        modelBuilder.Entity<RegulatoryEngagementBody>(entity =>
        {
            entity.ToTable("RegulatoryEngagementBody");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementBodies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementBody_AspNetUsers");
        });

        modelBuilder.Entity<RegulatoryEngagementBodyContact>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementBodyContacts)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementBodyContacts_AspNetUsers");

            entity.HasOne(d => d.RegulatoryEngagementBody).WithMany(p => p.RegulatoryEngagementBodyContacts)
                .HasForeignKey(d => d.RegulatoryEngagementBodyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementBodyContacts_RegulatoryEngagementBody");
        });

        modelBuilder.Entity<RegulatoryEngagementEventLog>(entity =>
        {
            entity.ToTable("RegulatoryEngagementEventLog");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EventDt).HasColumnType("datetime");
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.URL).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementEventLogs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementEventLog_AspNetUsers");

            entity.HasOne(d => d.RegulatoryEngagement).WithMany(p => p.RegulatoryEngagementEventLogs)
                .HasForeignKey(d => d.RegulatoryEngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementEventLog_RegulatoryEngagements");
        });

        modelBuilder.Entity<RegulatoryEngagementResource>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RoleInEngagement)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementResourceCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementResources_CratedAspNetUsers");

            entity.HasOne(d => d.RegulatoryEngagement).WithMany(p => p.RegulatoryEngagementResources)
                .HasForeignKey(d => d.RegulatoryEngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementResources_RegulatoryEngagements");

            entity.HasOne(d => d.User).WithMany(p => p.RegulatoryEngagementResourceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementResources_AspNetUsers");
        });

        modelBuilder.Entity<RegulatoryEngagementsOutcome>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EffectiveDt).HasColumnType("datetime");
            entity.Property(e => e.ExpiryDt).HasColumnType("datetime");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RegulatoryEngagementsOutcomes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementsOutcomes_AspNetUsers");

            entity.HasOne(d => d.RegulatoryEngagement).WithMany(p => p.RegulatoryEngagementsOutcomes)
                .HasForeignKey(d => d.RegulatoryEngagementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RegulatoryEngagementsOutcomes_RegulatoryEngagements");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RegulatoryEngagementOutcomes)
                .UsingEntity<Dictionary<string, object>>(
                    "RegulatoryEngagementOutcomesLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RegulatoryEngagementOutcomesLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RegulatoryEngagementsOutcome>().WithMany()
                        .HasForeignKey("RegulatoryEngagementOutcomeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RegulatoryEngagementOutcomesLinkIssuesActionsTasks_RegulatoryEngagementsOutcomes"),
                    j =>
                    {
                        j.HasKey("RegulatoryEngagementOutcomeId", "IssuesActionsTasksId");
                        j.ToTable("RegulatoryEngagementOutcomesLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<Risk>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AsA).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ItMay).IsRequired();
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RATBGColor).HasMaxLength(50);
            entity.Property(e => e.RATConsequence).HasMaxLength(200);
            entity.Property(e => e.RATFGColor).HasMaxLength(50);
            entity.Property(e => e.RATImpact).HasMaxLength(200);
            entity.Property(e => e.RATLikelihood).HasMaxLength(200);
            entity.Property(e => e.ResultingIn).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Risks_AspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.RiskOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Risks_OwnerAspNetUsers");

            entity.HasOne(d => d.RiskMatrix).WithMany(p => p.Risks)
                .HasForeignKey(d => d.RiskMatrixId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Risks_RisksMatrixs");

            entity.HasOne(d => d.RiskSuggestion).WithMany(p => p.Risks)
                .HasForeignKey(d => d.RiskSuggestionId)
                .HasConstraintName("FK_Risks_RisksSuggestions");

            entity.HasMany(d => d.Docs).WithMany(p => p.Risks)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksLinkDoc",
                    r => r.HasOne<Doc>().WithMany()
                        .HasForeignKey("DocsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksLinkDocs_Docs"),
                    l => l.HasOne<Risk>().WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksLinkDocs_Risks"),
                    j =>
                    {
                        j.HasKey("RiskId", "DocsId");
                        j.ToTable("RisksLinkDocs");
                    });

            entity.HasMany(d => d.RisksStandardsActs).WithMany(p => p.Risks)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksLinkRisksStandardsAct",
                    r => r.HasOne<RisksStandardsAct>().WithMany()
                        .HasForeignKey("RisksStandardsActsId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksLinkRisksStandardsActs_RisksStandardsActs"),
                    l => l.HasOne<Risk>().WithMany()
                        .HasForeignKey("RiskId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksLinkRisksStandardsActs_Risks"),
                    j =>
                    {
                        j.HasKey("RiskId", "RisksStandardsActsId");
                        j.ToTable("RisksLinkRisksStandardsActs");
                    });
        });

        modelBuilder.Entity<RiskDiscovery>(entity =>
        {
            entity.ToTable("RiskDiscovery");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AccountableOwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.BusinessUnit).IsRequired();
            entity.Property(e => e.BusinessUnitFunction).IsRequired();
            entity.Property(e => e.CreeatdDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.CretedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PoliciesIdentified).HasDefaultValue(1);
            entity.Property(e => e.PolicyExemptionsIdentified).HasDefaultValue(1);
            entity.Property(e => e.ProcessesIdentified).HasDefaultValue(1);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.WorkInstructionsIdentified).HasDefaultValue(1);

            entity.HasOne(d => d.AccountableOwner).WithMany(p => p.RiskDiscoveryAccountableOwners)
                .HasForeignKey(d => d.AccountableOwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscovery_AspNetUsers");

            entity.HasOne(d => d.CretedBy).WithMany(p => p.RiskDiscoveryCretedBies)
                .HasForeignKey(d => d.CretedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscovery_CreatedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.RiskDiscoveries)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscovery_Divisions");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDiscoveries)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscovery>().WithMany()
                        .HasForeignKey("RiskDiscoveryId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryLinkIssuesActionsTasks_RiskDiscovery"),
                    j =>
                    {
                        j.HasKey("RiskDiscoveryId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RiskDiscoveryControlScope>(entity =>
        {
            entity.ToTable("RiskDiscoveryControlScope");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ControlAssessmentComments).IsRequired();
            entity.Property(e => e.ControlFailureAppetite).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ExistingControl).HasDefaultValue(1);
            entity.Property(e => e.RiskMitigationCapacity).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryControlScopes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScope_CreatedAspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.RiskDiscoveryControlScopes)
                .HasForeignKey(d => d.IncidentCategoryId)
                .HasConstraintName("FK_RiskDiscoveryControlScope_IncidentsCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.RiskDiscoveryControlScopes)
                .HasForeignKey(d => d.IncidentSeverityId)
                .HasConstraintName("FK_RiskDiscoveryControlScope_IncidentsSeverities");

            entity.HasOne(d => d.RiskDiscoveryScope).WithMany(p => p.RiskDiscoveryControlScopes)
                .HasForeignKey(d => d.RiskDiscoveryScopeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScope_RiskDiscoveryScope");

            entity.HasOne(d => d.RisksControl).WithMany(p => p.RiskDiscoveryControlScopes)
                .HasForeignKey(d => d.RisksControlId)
                .HasConstraintName("FK_RiskDiscoveryControlScope_RisksControls");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDiscoveryControlScopes)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryControlScopeLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscoveryControlScope>().WithMany()
                        .HasForeignKey("RiskDiscoveryControlScopeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeLinkIssuesActionsTasks_RiskDiscoveryControlScope"),
                    j =>
                    {
                        j.HasKey("RiskDiscoveryControlScopeId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryControlScopeLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RiskDiscoveryControlScopeDesignEffectiveness>(entity =>
        {
            entity.ToTable("RiskDiscoveryControlScopeDesignEffectiveness");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AssuranceCoverage).IsRequired();
            entity.Property(e => e.AssuranceStatement).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FinalControlCommentary).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryControlScopeDesignEffectivenesses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScopeDesignEffectiveness_CreatedAspNetUsers");

            entity.HasOne(d => d.RiskDiscoveryControlScope).WithMany(p => p.RiskDiscoveryControlScopeDesignEffectivenesses)
                .HasForeignKey(d => d.RiskDiscoveryControlScopeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScopeDesignEffectiveness_RiskDiscoveryControlScope");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDiscoveryScopeDesignEffectivenesses)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryControlScopeDesignEffectivenessLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeDesignEffectivenessLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscoveryControlScopeDesignEffectiveness>().WithMany()
                        .HasForeignKey("RiskDiscoveryScopeDesignEffectivenessId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeDesignEffectivenessLinkIssuesActionsTasks_RiskDiscoveryControlScopeDesignEffectiveness"),
                    j =>
                    {
                        j.HasKey("RiskDiscoveryScopeDesignEffectivenessId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryControlScopeDesignEffectivenessLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RiskDiscoveryControlScopeOperatingEffectiveness>(entity =>
        {
            entity.ToTable("RiskDiscoveryControlScopeOperatingEffectiveness");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OESampleDescription).IsRequired();
            entity.Property(e => e.OperatingEffectivenessSummary).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryControlScopeOperatingEffectivenesses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScopeOperatingEffectiveness_AspNetUsers");

            entity.HasOne(d => d.RiskDiscoveryControlScopeDesignEffectiveness).WithMany(p => p.RiskDiscoveryControlScopeOperatingEffectivenesses)
                .HasForeignKey(d => d.RiskDiscoveryControlScopeDesignEffectivenessId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryControlScopeOperatingEffectiveness_RiskDiscoveryControlScopeDesignEffectiveness");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDiscoveryContorlScopeOperatingEffectivenesses)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryControlScopeOperatingEffectivenessLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeOperatingEffectivenessLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscoveryControlScopeOperatingEffectiveness>().WithMany()
                        .HasForeignKey("RiskDiscoveryContorlScopeOperatingEffectivenessId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryControlScopeOperatingEffectivenessLinkIssuesActionsTasks_RiskDiscoveryControlScopeOperatingEffectiveness"),
                    j =>
                    {
                        j.HasKey("RiskDiscoveryContorlScopeOperatingEffectivenessId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryControlScopeOperatingEffectivenessLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RiskDiscoveryResource>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RoleInDiscovery)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryResourceCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryResources_AspNetUsers");

            entity.HasOne(d => d.RiskDiscovery).WithMany(p => p.RiskDiscoveryResources)
                .HasForeignKey(d => d.RiskDiscoveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryResources_RiskDiscovery");

            entity.HasOne(d => d.User).WithMany(p => p.RiskDiscoveryResourceUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryResources_AspNetUsers1");
        });

        modelBuilder.Entity<RiskDiscoveryScope>(entity =>
        {
            entity.ToTable("RiskDiscoveryScope");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DefinitionASA).IsRequired();
            entity.Property(e => e.DefinitionItMay).IsRequired();
            entity.Property(e => e.DefinitionResultingIn).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RiskOwnerId).HasMaxLength(450);
            entity.Property(e => e.RiskSuitabilityComments).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryScopeCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryScope_AspNetUsers1");

            entity.HasOne(d => d.Division).WithMany(p => p.RiskDiscoveryScopes)
                .HasForeignKey(d => d.DivisionId)
                .HasConstraintName("FK_RiskDiscoveryScope_Divisions");

            entity.HasOne(d => d.RiskDiscovery).WithMany(p => p.RiskDiscoveryScopes)
                .HasForeignKey(d => d.RiskDiscoveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryScope_RiskDiscovery");

            entity.HasOne(d => d.Risk).WithMany(p => p.RiskDiscoveryScopes)
                .HasForeignKey(d => d.RiskId)
                .HasConstraintName("FK_RiskDiscoveryScope_Risks");

            entity.HasOne(d => d.RiskOwner).WithMany(p => p.RiskDiscoveryScopeRiskOwners)
                .HasForeignKey(d => d.RiskOwnerId)
                .HasConstraintName("FK_RiskDiscoveryScope_AspNetUsers");

            entity.HasOne(d => d.RisksOwnedRisk).WithMany(p => p.RiskDiscoveryScopes)
                .HasForeignKey(d => d.RisksOwnedRiskId)
                .HasConstraintName("FK_RiskDiscoveryScope_RisksOwnedRisk");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDiscoveryScopes)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryScopeLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryScopeLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscoveryScope>().WithMany()
                        .HasForeignKey("RiskDiscoveryScopeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryScopeLinkIssuesActionsTasks_RiskDiscoveryScope"),
                    j =>
                    {
                        j.HasKey("RiskDiscoveryScopeId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryScopeLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RiskDiscoveryScopeInherentAndResidualAssessment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InherentRiskAssessmentQuality).IsRequired();
            entity.Property(e => e.ResidualRiskAssessmentQuality).IsRequired();
            entity.Property(e => e.ReveiwHistory).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RiskDiscoveryScopeInherentAndResidualAssessments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryScopeInherentAndResidualAssessments_AspNetUsers");

            entity.HasOne(d => d.RiskDiscoveryScope).WithMany(p => p.RiskDiscoveryScopeInherentAndResidualAssessments)
                .HasForeignKey(d => d.RiskDiscoveryScopeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskDiscoveryScopeInherentAndResidualAssessments_RiskDiscoveryControlScope");

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskDescoveryScopeInherentAndResidualAssessments)
                .UsingEntity<Dictionary<string, object>>(
                    "RiskDiscoveryScopeInherentAndResidualAssessmentsLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryScopeInherentAndResidualAssessmentsLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RiskDiscoveryScopeInherentAndResidualAssessment>().WithMany()
                        .HasForeignKey("RiskDescoveryScopeInherentAndResidualAssessmentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskDiscoveryScopeInherentAndResidualAssessmentsLinkIssuesActionsTasks_RiskDiscoveryScopeInherentAndResidualAssessments"),
                    j =>
                    {
                        j.HasKey("RiskDescoveryScopeInherentAndResidualAssessmentId", "IssuesActionsTasksId");
                        j.ToTable("RiskDiscoveryScopeInherentAndResidualAssessmentsLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RisksControl>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ControlRationale).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EscalationPath).IsRequired();
            entity.Property(e => e.FailureAppetiate).IsRequired();
            entity.Property(e => e.IncidentTypeId).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.RemediatesRiskBy).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksControlCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControls_createdAspNetUsers");

            entity.HasOne(d => d.IncidentCategory).WithMany(p => p.RisksControls)
                .HasForeignKey(d => d.IncidentCategoryId)
                .HasConstraintName("FK_RisksControls_IncidentsCategories");

            entity.HasOne(d => d.IncidentSeverity).WithMany(p => p.RisksControls)
                .HasForeignKey(d => d.IncidentSeverityId)
                .HasConstraintName("FK_RisksControls_IncidentsSeverities");

            entity.HasOne(d => d.Owner).WithMany(p => p.RisksControlOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControls_OwnerAspNetUsers");

            entity.HasOne(d => d.RIsk).WithMany(p => p.RisksControls)
                .HasForeignKey(d => d.RIskId)
                .HasConstraintName("FK_RisksControls_Risks");

            entity.HasOne(d => d.RiskControlSuggestion).WithMany(p => p.RisksControls)
                .HasForeignKey(d => d.RiskControlSuggestionId)
                .HasConstraintName("FK_RisksControls_RisksControlSuggestions");
        });

        modelBuilder.Entity<RisksControlSuggestion>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MyRole)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.ProblemObserved).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksControlSuggestions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControlSuggestions_AspNetUsers");

            entity.HasOne(d => d.Risk).WithMany(p => p.RisksControlSuggestions)
                .HasForeignKey(d => d.RiskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControlSuggestions_Risks");
        });

        modelBuilder.Entity<RisksControlSuggestionComment>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksControlSuggestionComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControlSuggestionComments_AspNetUsers");

            entity.HasOne(d => d.RiskControlSuggestion).WithMany(p => p.RisksControlSuggestionComments)
                .HasForeignKey(d => d.RiskControlSuggestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksControlSuggestionComments_RisksControlSuggestions");
        });

        modelBuilder.Entity<RisksMatirxsConcequenceLabel>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Measurement).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksMatirxsConcequenceLabels)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatirxsConcequenceLabels_AspNetUsers");

            entity.HasOne(d => d.RiskMatrix).WithMany(p => p.RisksMatirxsConcequenceLabels)
                .HasForeignKey(d => d.RiskMatrixId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatirxsConcequenceLabels_RisksMatrixs");
        });

        modelBuilder.Entity<RisksMatirxsLikelihoodLabel>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.BGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Measurement).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksMatirxsLikelihoodLabels)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatirxsLikelihoodLabels_AspNetUsers");

            entity.HasOne(d => d.RiskMatrix).WithMany(p => p.RisksMatirxsLikelihoodLabels)
                .HasForeignKey(d => d.RiskMatrixId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatirxsLikelihoodLabels_RisksMatrixs");
        });

        modelBuilder.Entity<RisksMatrix>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ConsequenceScale).HasDefaultValue(1);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LikelihoodScale).HasDefaultValue(1);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksMatrices)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatrixs_AspNetUsers");
        });

        modelBuilder.Entity<RisksMatrixLikelihoodConsequenceField>(entity =>
        {
            entity.HasKey(e => new { e.RiskMatrixId, e.RiskMatrixConsequenceId, e.RiskMatrixLikelihoodId });

            entity.Property(e => e.BGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FGColor)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Label)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksMatrixLikelihoodConsequenceFields)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatrixLikelihoodConsequenceFields_AspNetUsers");

            entity.HasOne(d => d.RiskMatrixConsequence).WithMany(p => p.RisksMatrixLikelihoodConsequenceFields)
                .HasForeignKey(d => d.RiskMatrixConsequenceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatrixLikelihoodConsequenceFields_RisksMatirxsConcequenceLabels");

            entity.HasOne(d => d.RiskMatrix).WithMany(p => p.RisksMatrixLikelihoodConsequenceFields)
                .HasForeignKey(d => d.RiskMatrixId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatrixLikelihoodConsequenceFields_RisksMatrixs");

            entity.HasOne(d => d.RiskMatrixLikelihood).WithMany(p => p.RisksMatrixLikelihoodConsequenceFields)
                .HasForeignKey(d => d.RiskMatrixLikelihoodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksMatrixLikelihoodConsequenceFields_RisksMatirxsLikelihoodLabels");
        });

        modelBuilder.Entity<RisksOwnedRisk>(entity =>
        {
            entity.ToTable("RisksOwnedRisk");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.EffectiveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpiryDate).HasColumnType("datetime");
            entity.Property(e => e.OwnerId)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRisk_CreatedAspNetUsers");

            entity.HasOne(d => d.Division).WithMany(p => p.RisksOwnedRisks)
                .HasForeignKey(d => d.DivisionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRisk_Divisions");

            entity.HasOne(d => d.Owner).WithMany(p => p.RisksOwnedRiskOwners)
                .HasForeignKey(d => d.OwnerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRisk_AspNetUsers");

            entity.HasOne(d => d.Risk).WithMany(p => p.RisksOwnedRisks)
                .HasForeignKey(d => d.RiskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRisk_Risks");
        });

        modelBuilder.Entity<RisksOwnedRiskAutomatedControlTestBatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskAutomatedControlTestBatch");

            entity.ToTable("RisksOwnedRiskAutomatedControlTestBatch");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BatchEndDt).HasColumnType("datetime");
            entity.Property(e => e.BatchStartDt).HasColumnType("datetime");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskAutomatedControlTestBatches)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatch_AspNetUsers");

            entity.HasOne(d => d.RiskOwnedRiskAutomatedControlTestDefinition).WithMany(p => p.RisksOwnedRiskAutomatedControlTestBatches)
                .HasForeignKey(d => d.RiskOwnedRiskAutomatedControlTestDefinitionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatch_RisksOwnedRiskAutomatedControlTestDefinition");

            entity.HasMany(d => d.Incidents).WithMany(p => p.RiskOwnedRiskAutomatedControlTestBatches)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksOwnedRiskAutomatedControlTestBatchLinkIncident",
                    r => r.HasOne<Incident>().WithMany()
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatchLinkIncidents_Incidents"),
                    l => l.HasOne<RisksOwnedRiskAutomatedControlTestBatch>().WithMany()
                        .HasForeignKey("RiskOwnedRiskAutomatedControlTestBatchId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatchLinkIncidents_RisksOwnedRiskAutomatedControlTestBatch"),
                    j =>
                    {
                        j.HasKey("RiskOwnedRiskAutomatedControlTestBatchId", "IncidentId").HasName("PK_RiskOwnedRiskAutomatedControlTestBatchLinkIncidents");
                        j.ToTable("RisksOwnedRiskAutomatedControlTestBatchLinkIncidents");
                    });

            entity.HasMany(d => d.IssuesActionsTasks).WithMany(p => p.RiskOwnedRiskAutomatedControlTestBatches)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksOwnedRiskAutomatedControlTestBatchLinkIssuesActionsTask",
                    r => r.HasOne<IssuesActionsTask>().WithMany()
                        .HasForeignKey("IssuesActionsTasksId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksOwnedRiskAutomatedControlTestBatchLinkIssuesActionsTasks_IssuesActionsTasks"),
                    l => l.HasOne<RisksOwnedRiskAutomatedControlTestBatch>().WithMany()
                        .HasForeignKey("RiskOwnedRiskAutomatedControlTestBatchId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksOwnedRiskAutomatedControlTestBatchLinkIssuesActionsTasks_RisksOwnedRiskAutomatedControlTestBatch"),
                    j =>
                    {
                        j.HasKey("RiskOwnedRiskAutomatedControlTestBatchId", "IssuesActionsTasksId");
                        j.ToTable("RisksOwnedRiskAutomatedControlTestBatchLinkIssuesActionsTasks");
                    });
        });

        modelBuilder.Entity<RisksOwnedRiskAutomatedControlTestBatchExecutedOutcome>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskAutomatedControlTestBatchExecutedOutcomes");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionIdentifier)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.QuestionText).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TestType)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TestValues).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskAutomatedControlTestBatchExecutedOutcomes)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatchExecutedOutcomes_AspNetUsers");

            entity.HasOne(d => d.RiskOwnedRiskAutomatedControlTestBatch).WithMany(p => p.RisksOwnedRiskAutomatedControlTestBatchExecutedOutcomes)
                .HasForeignKey(d => d.RiskOwnedRiskAutomatedControlTestBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskAutomatedControlTestBatchExecutedOutcomes_RisksOwnedRiskAutomatedControlTestBatch");
        });

        modelBuilder.Entity<RisksOwnedRiskAutomatedControlTestDefinition>(entity =>
        {
            entity.ToTable("RisksOwnedRiskAutomatedControlTestDefinition");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.TestJSON).IsRequired();
            entity.Property(e => e.TestType)
                .IsRequired()
                .HasMaxLength(10);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskAutomatedControlTestDefinitions)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskAutomatedControlTestDefinition_AspNetUsers");

            entity.HasOne(d => d.RiskControl).WithMany(p => p.RisksOwnedRiskAutomatedControlTestDefinitions)
                .HasForeignKey(d => d.RiskControlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskAutomatedControlTestDefinition_RisksControls");

            entity.HasOne(d => d.RiskOwnedRisk).WithMany(p => p.RisksOwnedRiskAutomatedControlTestDefinitions)
                .HasForeignKey(d => d.RiskOwnedRiskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskAutomatedControlTestDefinition_RisksOwnedRisk");
        });

        modelBuilder.Entity<RisksOwnedRiskInherentAndRedisualAssessment>(entity =>
        {
            entity.ToTable("RisksOwnedRiskInherentAndRedisualAssessment");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.AssessmentOutcome).HasDefaultValue(1);
            entity.Property(e => e.AssessmentSummary).HasMaxLength(200);
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.InherentConsequence).HasMaxLength(200);
            entity.Property(e => e.InherentImpact).HasMaxLength(200);
            entity.Property(e => e.InherentLikelihood).HasMaxLength(200);
            entity.Property(e => e.NextReviewDt).HasColumnType("datetime");
            entity.Property(e => e.ResidualConsequence).HasMaxLength(200);
            entity.Property(e => e.ResidualImpact).HasMaxLength(200);
            entity.Property(e => e.ResidualLikelihood)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskInherentAndRedisualAssessments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskInherentAndRedisualAssessment_CreatedAspNetUsers");

            entity.HasOne(d => d.OwnedRisk).WithMany(p => p.RisksOwnedRiskInherentAndRedisualAssessments)
                .HasForeignKey(d => d.OwnedRiskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskInherentAndRedisualAssessment_RisksOwnedRisk");

            entity.HasMany(d => d.Improvements).WithMany(p => p.RiskOwnedRiskInherentAndResidualRiskAssessments)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksOwnedRiskInherentAndResidualRiskAssessmentLinkImprovement",
                    r => r.HasOne<Improvement>().WithMany()
                        .HasForeignKey("ImprovementId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskInherentAndResidualRiskAssessmentLinkImprovement_Improvements"),
                    l => l.HasOne<RisksOwnedRiskInherentAndRedisualAssessment>().WithMany()
                        .HasForeignKey("RiskOwnedRiskInherentAndResidualRiskAssessmentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RiskInherentAndResidualRiskAssessmentLinkImprovement_RisksOwnedRiskInherentAndRedisualAssessment"),
                    j =>
                    {
                        j.HasKey("RiskOwnedRiskInherentAndResidualRiskAssessmentId", "ImprovementId").HasName("PK_RiskInherentAndResidualRiskAssessmentLinkImprovement");
                        j.ToTable("RisksOwnedRiskInherentAndResidualRiskAssessmentLinkImprovement");
                    });
        });

        modelBuilder.Entity<RisksOwnedRiskInherentAndResidualAssessmentControlEffectiveness>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskInherentAndResidualAssessmentControlEffectiveness");

            entity.ToTable("RisksOwnedRiskInherentAndResidualAssessmentControlEffectiveness");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Commentary).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DEEffectiveness)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DETestMethodology).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.OEEffectiveness)
                .HasMaxLength(50)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OESampleSize).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.OETestMethodology).HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentControlEffectivenesses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentAndResidualAssessmentControlEffectiveness_AspNetUsers");

            entity.HasOne(d => d.RiskControl).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentControlEffectivenesses)
                .HasForeignKey(d => d.RiskControlId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentAndResidualAssessmentControlEffectiveness_RisksControls");

            entity.HasOne(d => d.RiskLibraryOwnedRiskInhereentAndResidualAssessment).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentControlEffectivenesses)
                .HasForeignKey(d => d.RiskLibraryOwnedRiskInhereentAndResidualAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentAndResidualAssessmentControlEffectiveness_RisksOwnedRiskInherentAndRedisualAssessment");
        });

        modelBuilder.Entity<RisksOwnedRiskInherentAndResidualAssessmentSignOff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskInherentAndResidualAssessmentSignOff");

            entity.ToTable("RisksOwnedRiskInherentAndResidualAssessmentSignOff");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ConfirmationStatement).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);
        });

        modelBuilder.Entity<RisksOwnedRiskInherentAndResidualAssessmentUser>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RisksOwnedRiskInherent_ndResidualRiskAssessmentId).HasColumnName("RisksOwnedRiskInherent@ndResidualRiskAssessmentId");
            entity.Property(e => e.RoleInAssessment).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentUserCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskInherentAndResidualAssessmentUsers_RisksOwnedRiskInherentAndResidualAssessmentUsers");

            entity.HasOne(d => d.RisksOwnedRiskInherent_ndResidualRiskAssessment).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentUsers)
                .HasForeignKey(d => d.RisksOwnedRiskInherent_ndResidualRiskAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskInherentAndResidualAssessmentUsers_RisksOwnedRiskInherentAndRedisualAssessment");

            entity.HasOne(d => d.User).WithMany(p => p.RisksOwnedRiskInherentAndResidualAssessmentUserUsers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksOwnedRiskInherentAndResidualAssessmentUsers_UserAspNetUsers");
        });

        modelBuilder.Entity<RisksOwnedRiskInherentResidualRiskAnalysis>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskInherentResidualRiskAnalysis");

            entity.ToTable("RisksOwnedRiskInherentResidualRiskAnalysis");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskInherentResidualRiskAnalyses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentResidualRiskAnalysis_AspNetUsers");

            entity.HasOne(d => d.RisksOwnedRiskInherentAndResidualAssessment).WithMany(p => p.RisksOwnedRiskInherentResidualRiskAnalyses)
                .HasForeignKey(d => d.RisksOwnedRiskInherentAndResidualAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentResidualRiskAnalysis_RisksOwnedRiskInherentAndRedisualAssessment");
        });

        modelBuilder.Entity<RisksOwnedRiskInherentRiskAnalysis>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskInherentRiskAnalysis");

            entity.ToTable("RisksOwnedRiskInherentRiskAnalysis");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskInherentRiskAnalyses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentRiskAnalysis_AspNetUsers");

            entity.HasOne(d => d.RisksOwnedRiskInherentAndResidualAssessment).WithMany(p => p.RisksOwnedRiskInherentRiskAnalyses)
                .HasForeignKey(d => d.RisksOwnedRiskInherentAndResidualAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskInherentRiskAnalysis_RisksOwnedRiskInherentAndRedisualAssessment");
        });

        modelBuilder.Entity<RisksOwnedRiskResidualRiskAnalysis>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskOwnedRiskResidualRiskAnalysis");

            entity.ToTable("RisksOwnedRiskResidualRiskAnalysis");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksOwnedRiskResidualRiskAnalyses)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskResidualRiskAnalysis_AspNetUsers");

            entity.HasOne(d => d.RisksOwnedRiskInherentAndResidualAssessment).WithMany(p => p.RisksOwnedRiskResidualRiskAnalyses)
                .HasForeignKey(d => d.RisksOwnedRiskInherentAndResidualAssessmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskOwnedRiskResidualRiskAnalysis_RisksOwnedRiskInherentAndRedisualAssessment");
        });

        modelBuilder.Entity<RisksStandardsAct>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksStandardsActs)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RisksStandardsActs_AspNetUsers");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_RisksStandardsActs_RisksStandardsActs");
        });

        modelBuilder.Entity<RisksSuggestion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskSuggestions");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AsA).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ItMay).IsRequired();
            entity.Property(e => e.OwnerId).HasMaxLength(450);
            entity.Property(e => e.ResultingIn).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksSuggestionCreatedBies)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskSuggestions_AspNetUsers");

            entity.HasOne(d => d.Owner).WithMany(p => p.RisksSuggestionOwners)
                .HasForeignKey(d => d.OwnerId)
                .HasConstraintName("FK_RiskSuggestions_AspNetUsers1");

            entity.HasMany(d => d.RiskStandardActs).WithMany(p => p.RiskSuggestions)
                .UsingEntity<Dictionary<string, object>>(
                    "RisksSuggestionLinkRisksStandardsAct",
                    r => r.HasOne<RisksStandardsAct>().WithMany()
                        .HasForeignKey("RiskStandardActId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksSuggestionLinkRisksStandardsActs_RisksStandardsActs"),
                    l => l.HasOne<RisksSuggestion>().WithMany()
                        .HasForeignKey("RiskSuggestionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_RisksSuggestionLinkRisksStandardsActs_RisksSuggestions"),
                    j =>
                    {
                        j.HasKey("RiskSuggestionId", "RiskStandardActId");
                        j.ToTable("RisksSuggestionLinkRisksStandardsActs");
                    });
        });

        modelBuilder.Entity<RisksSuggestionComment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_RiskSuggestionComments");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Comment).IsRequired();
            entity.Property(e => e.CreatedById)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.CreatedDt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.RisksSuggestionComments)
                .HasForeignKey(d => d.CreatedById)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskSuggestionComments_AspNetUsers");

            entity.HasOne(d => d.RiskSuggestion).WithMany(p => p.RisksSuggestionComments)
                .HasForeignKey(d => d.RiskSuggestionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RiskSuggestionComments_RiskSuggestions");
        });

        modelBuilder.Entity<SSRSReportGroup>(entity =>
        {
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.GroupName).IsRequired();
        });

        modelBuilder.Entity<SSRSReportList>(entity =>
        {
            entity.ToTable("SSRSReportList");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DisplayId)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.ReportName).IsRequired();
            entity.Property(e => e.ReportURL).IsRequired();
            entity.Property(e => e.Status).HasDefaultValue(1);

            entity.HasOne(d => d.ReportGroup).WithMany(p => p.SSRSReportLists)
                .HasForeignKey(d => d.ReportGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SSRSReportList_SSRSReportGroups");
        });

        modelBuilder.Entity<TenantKey>(entity =>
        {
            entity.HasKey(e => e.TenantId).HasName("PK__TenantKe__2E9B47E13BBF6F32");

            entity.Property(e => e.TenantId).HasMaxLength(100);
            entity.Property(e => e.SearchKey).HasMaxLength(200);
            entity.Property(e => e.SearchServiceName).HasMaxLength(200);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}